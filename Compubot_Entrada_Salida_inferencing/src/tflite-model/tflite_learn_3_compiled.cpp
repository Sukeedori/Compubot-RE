/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.05.2025 22:02:26

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238544;
#else
constexpr int kTensorArenaSize = 237520;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0036242059431970119, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 51862, -56997, -54164, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 9.4901937700342387e-05, 0.00010217100498266518, 9.8291748145129532e-05, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 76,66,116,-83,-68,13,-35,38,-4,55,28,-46,-37,-100,101,27,-58,89,74,107,-31,-8,50,-95,-107,127,-69,-3,70,14,-33,-8, 
  /* [1][0][][] */ 52,-25,-58,31,1,127,-12,2,121,-57,7,-64,-64,107,36,-40,94,-41,-2,-86,-97,27,100,63,33,26,-5,-4,-75,-47,13,-23, 
  /* [2][0][][] */ -25,81,-71,82,87,-36,-26,116,94,35,127,4,-92,-76,77,119,-74,-52,12,-106,75,114,-45,-81,90,-49,-14,-117,25,-71,73,-16, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0032987890299409628, 0.0035514615010470152, 0.0034166187979280949, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -208, 380, -486, 552, 457, 816, -397, 462, 629, 149, 471, -503, -410, 98, 82, 401, 30, -273, 18, -394, 77, 462, -212, -381, 557, -96, -379, -578, 538, -342, 749, -404, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.9496589781483635e-05, 5.5063446779968217e-05, 5.176548074814491e-05, 5.6443714129272848e-05, 5.4742846259614453e-05, 5.2660547225968912e-05, 5.4026961151976138e-05, 5.4640549933537841e-05, 5.5360596888931468e-05, 5.0255257519893348e-05, 5.5765969591448084e-05, 5.0876893510576338e-05, 5.1087048632325605e-05, 5.5423948651878163e-05, 5.3368064982350916e-05, 5.3887557442067191e-05, 5.2318773668957874e-05, 5.1003124099224806e-05, 5.2276496717240661e-05, 5.2783601859118789e-05, 5.1745188102358952e-05, 4.9972863052971661e-05, 5.2116974984528497e-05, 5.367788253352046e-05, 5.717635212931782e-05, 5.1110968342982233e-05, 5.3231266065267846e-05, 5.205600245972164e-05, 5.2277064241934568e-05, 5.153333768248558e-05, 5.7192308304365724e-05, 5.4002262913854793e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -46,-57,109,4,105,-20,-96,-117,67,-110,-121,-3,55,6,-45,56,-65,-41,-73,-67,-82,-120,-2,113,-127,13,78,-54,113,-4,-24,-94,86,-74,-109,64,-127,-85,-104,30,84,-101,-112,106,55,-124,118,-25, 
  /* [1][0][][] */ -61,46,-60,8,-32,90,45,17,63,-97,-118,113,74,-19,23,74,116,-31,22,127,-38,4,46,38,40,23,-32,100,20,9,95,-56,71,115,2,22,60,46,-3,-58,-66,17,-22,-93,-52,43,-43,-44, 
  /* [2][0][][] */ 34,27,-75,86,-31,-76,81,86,-117,77,-47,110,85,-28,75,-126,-75,-41,22,45,-115,-27,105,10,-38,75,98,-1,-85,69,72,87,-83,-33,-110,-126,-101,92,101,-37,-127,-92,2,-12,-101,110,-40,-93, 
  /* [3][0][][] */ 91,14,52,-7,-60,65,-94,54,68,37,78,16,101,109,84,17,117,111,-37,29,127,-71,-48,-96,-12,-102,-65,114,58,-79,99,21,-41,-19,-1,4,-77,-18,52,55,-24,-74,-76,6,91,45,-27,-66, 
  /* [4][0][][] */ 63,115,12,66,-16,-10,43,28,63,100,-22,63,40,-24,-2,-53,-11,8,-54,27,120,-77,98,39,-7,7,75,-51,-34,48,-58,-40,81,127,28,-90,-37,-8,-99,57,-44,-48,-63,-82,17,117,37,69, 
  /* [5][0][][] */ 118,-106,95,75,43,-112,43,66,127,-101,13,-57,14,120,52,26,70,80,-58,99,43,70,36,-39,-96,-75,-18,-80,38,49,34,-86,-46,-9,-79,36,-104,-26,55,14,-83,-65,60,109,-17,39,54,-38, 
  /* [6][0][][] */ 12,-53,107,69,-89,-71,-8,60,-19,-88,4,-94,80,50,111,-125,35,-4,-5,96,-84,-125,103,52,-64,-86,-14,-62,-34,-120,43,-83,-97,-127,-52,-111,-15,37,-112,77,83,50,18,-18,-116,100,-89,-52, 
  /* [7][0][][] */ 127,81,-26,-31,-64,127,-9,10,120,15,-113,25,65,-77,53,83,64,28,6,125,65,45,6,98,-61,108,51,61,-67,117,-14,45,37,37,78,111,-95,79,1,-21,93,-65,94,73,34,8,103,-100, 
  /* [8][0][][] */ 31,44,-30,-76,65,42,-59,-6,24,54,57,105,13,-27,-69,-62,-51,109,-45,30,46,-12,95,120,-102,97,57,88,-55,37,-72,127,104,-19,59,16,125,9,-7,75,80,112,-91,-110,7,-11,-5,121, 
  /* [9][0][][] */ 10,15,127,58,79,-109,-68,-121,29,55,-20,61,-38,-81,-120,-42,15,7,-109,-70,9,111,-110,-111,107,-22,-6,13,-23,-76,-97,104,74,7,35,-14,-81,9,-36,-60,41,-82,70,-104,78,27,-113,66, 
  /* [10][0][][] */ -50,93,101,-54,-8,115,115,38,44,40,13,-57,107,90,-25,21,-23,90,-87,-50,-7,38,67,-57,40,60,-104,-104,-37,88,-84,-70,95,109,127,83,-30,5,-22,41,-33,124,-100,-31,-102,-46,3,-47, 
  /* [11][0][][] */ 105,10,-27,101,117,34,46,18,106,86,-93,109,-16,-102,18,-67,-74,-123,56,30,19,69,14,-127,-124,-105,-33,64,76,-22,17,-33,-103,-84,41,36,-77,71,-38,-68,-37,108,-93,-3,-57,-77,-108,-105, 
  /* [12][0][][] */ 3,63,-67,-9,85,-2,-45,27,-88,54,-3,6,-57,4,43,-91,-116,-45,-59,-96,18,-20,8,94,-76,-58,96,-109,89,5,-45,114,-101,-84,-59,8,-12,-81,-28,38,118,33,-127,-48,-19,-97,-42,115, 
  /* [13][0][][] */ 127,-70,94,84,85,107,78,61,90,-83,26,-35,79,76,82,-56,-118,-69,-52,19,64,-33,115,-57,-64,32,-3,32,-97,-71,99,33,30,91,-30,55,-89,-17,17,61,-50,65,-36,14,-24,32,16,-31, 
  /* [14][0][][] */ -55,-95,92,75,73,-25,-14,-112,-75,-32,74,82,-35,-79,-92,-105,-52,-57,15,29,-45,35,2,67,-127,-87,-30,32,-116,-117,-79,37,111,-18,-32,9,97,119,32,-126,-10,-109,39,93,72,-110,69,-84, 
  /* [15][0][][] */ 22,-11,-15,89,103,-74,73,-85,55,6,-85,23,120,13,-84,-100,102,23,-95,38,61,32,86,124,89,78,53,96,36,66,67,-89,19,22,-49,-2,-55,100,123,-58,14,127,-43,-17,10,-68,-55,-68, 
  /* [16][0][][] */ -50,-11,100,-73,38,112,-57,40,71,71,-94,68,-22,-45,-34,-71,110,82,94,60,114,77,-41,44,-36,51,-78,81,-114,32,63,10,-119,70,50,82,-42,70,-57,-77,39,-58,92,97,86,111,127,-15, 
  /* [17][0][][] */ 30,-121,28,82,-45,-127,-74,-110,40,-100,86,51,103,60,-127,53,26,52,105,117,-105,-18,10,-61,29,80,-89,27,110,-63,-38,78,-39,-30,30,0,-54,104,-95,-30,-98,-48,-23,-13,2,8,86,-124, 
  /* [18][0][][] */ -108,113,114,-62,-3,-109,-98,7,-12,80,-118,-43,-32,39,58,-54,25,-20,55,-21,111,-42,24,-77,35,-92,-24,118,40,40,5,46,45,-19,-103,-117,-28,33,-31,73,-38,5,-57,-17,-127,21,26,2, 
  /* [19][0][][] */ 13,23,73,35,56,-92,95,88,91,-68,29,-17,-102,30,-61,58,68,-113,105,54,-28,77,-62,9,72,-84,23,-72,-96,-127,-71,42,75,-89,27,-6,4,-72,-61,-104,42,-123,-89,7,-93,26,77,-101, 
  /* [20][0][][] */ -24,89,82,114,-77,107,26,69,3,0,-99,16,7,92,31,-62,-44,-31,-81,-20,33,-35,-71,-58,86,-62,-95,41,39,2,-54,127,119,62,-1,45,55,-41,-3,-101,-83,-21,-102,-108,-41,-65,-86,121, 
  /* [21][0][][] */ 114,93,88,-102,108,-70,86,30,6,-61,-79,53,6,51,-49,-101,-103,-22,40,-4,127,-45,87,-80,68,-93,-31,83,24,15,-3,-15,12,31,-91,-114,127,102,-123,-42,-13,17,40,-20,-101,-80,-84,110, 
  /* [22][0][][] */ 29,-60,-81,-106,97,-62,125,55,-96,94,-76,-118,113,-113,-123,-90,36,83,-119,-69,89,-84,29,26,99,-7,-127,107,-67,-80,-61,-121,44,65,13,14,-2,-17,-64,-117,12,-20,0,95,63,-124,102,-26, 
  /* [23][0][][] */ 54,-101,-4,47,92,-127,-5,-114,51,-91,88,66,8,-118,12,-49,79,-45,-115,91,83,-92,94,-46,-20,-18,73,21,61,38,65,-49,-50,32,8,25,90,-9,-124,-2,-109,-10,0,-116,-66,-102,109,16, 
  /* [24][0][][] */ -57,-35,-87,-55,-77,-92,-54,-73,80,127,93,52,116,73,-26,-105,-64,55,42,-38,105,-66,-40,-24,58,-25,78,65,112,67,17,-49,6,21,59,44,-42,-75,68,-13,-69,-84,114,7,38,-21,58,82, 
  /* [25][0][][] */ -92,-67,-87,-20,101,-85,-107,50,55,-113,-24,22,70,-1,-116,-22,-84,60,39,-124,67,87,-15,-72,15,-51,-117,49,74,-97,49,117,91,-127,38,88,104,-47,-25,-19,-78,94,-110,1,121,41,84,37, 
  /* [26][0][][] */ 49,-125,-26,-19,-104,-10,-14,-19,-111,-127,104,82,-85,-53,7,-16,109,24,-86,-73,8,68,95,8,49,61,7,45,9,0,-98,-7,-38,-68,-107,-109,-71,82,-57,108,-105,99,54,30,-78,70,-44,98, 
  /* [27][0][][] */ -2,8,-74,-110,-127,-86,-83,-28,32,92,28,-116,-32,48,76,-23,59,-28,53,-93,-111,4,-39,-29,-115,49,-115,-11,67,16,-46,-18,62,68,-99,-104,-99,-75,-127,91,-103,16,16,15,88,15,55,98, 
  /* [28][0][][] */ 105,8,102,58,-108,-54,-93,-67,-47,-106,74,81,-72,-80,17,111,106,127,-64,88,-17,35,-100,-67,-112,91,-78,-62,-66,-69,7,-8,-97,29,94,89,28,-96,-31,34,118,54,-83,65,-99,-1,21,60, 
  /* [29][0][][] */ 49,50,53,-60,-93,8,-127,2,99,-19,-96,-102,107,-112,-54,-47,-109,102,24,-73,-84,-40,52,0,-39,7,-51,-32,-111,-12,106,-8,48,-4,-89,-62,-15,107,-9,99,53,107,-51,84,-4,107,-56,-31, 
  /* [30][0][][] */ 45,-70,-47,43,-101,41,-48,6,127,3,15,-41,-106,35,72,-3,12,53,106,-81,57,-85,-88,26,-109,11,-52,115,-25,-85,-70,18,-69,-64,-99,-32,15,-11,7,11,79,-65,8,93,119,-23,116,75, 
  /* [31][0][][] */ 76,-101,31,95,47,57,-64,-106,-34,-23,-78,-93,94,-127,-51,107,-68,-97,33,44,58,31,-37,101,43,-117,30,40,-79,-79,46,104,11,15,-99,-13,93,-30,-74,-114,61,-76,-35,31,6,-59,-25,18, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021036050748080015, 0.0023401963990181684, 0.0022000328171998262, 0.0023988578468561172, 0.0023265709169209003, 0.0022380731534212828, 0.0022961457725614309, 0.0023222232703119516, 0.002352825365960598, 0.002135848393663764, 0.0023700536694377661, 0.0021622679196298122, 0.0021711995359510183, 0.0023555178195238113, 0.0022681427653878927, 0.0022902211640030146, 0.0022235477808862925, 0.0021676328033208847, 0.0022217510268092155, 0.002243302995339036, 0.0021991704124957323, 0.002123846672475338, 0.0022149714641273022, 0.00228131003677845, 0.0024299949873238802, 0.0021722160745412111, 0.0022623287513852119, 0.0022123800590634346, 0.0022217752411961555, 0.0021901668515056372, 0.0024306729901582003, 0.0022950961720198393, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { 1577, -1306, 3893, 2645, 3351, 243, 1549, 4715, -2748, -2057, -1091, 7732, 3969, 5018, 8437, -3101, -3167, 9129, 2577, 5046, 4202, 20588, 15644, 826, -1538, 1853, -438, -900, 2508, 2365, 4590, 7121, -737, 589, 12578, 3835, 6987, 3091, 1305, -1482, 4488, -1561, 9422, -477, 459, 3075, -1332, 3210, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00023835674801375717, 0.00024417569511570036, 0.00019790946680586785, 0.00019444068311713636, 0.00014477250806521624, 0.0002003387053264305, 0.00019464422075543553, 0.00015536704449914396, 0.00015242064546328038, 0.00017668347572907805, 0.00024192227283492684, 9.9026445241179317e-05, 0.00016824735212139785, 0.00012525143392849714, 0.00010083863162435591, 0.00017248040239792317, 0.00018217379692941904, 0.00011022792750736699, 0.00022992548474576324, 0.00015691659064032137, 0.00019587126735132188, 5.1164799515390769e-05, 6.483978359028697e-05, 0.00028997863410040736, 0.00026023853570222855, 0.00015978404553607106, 0.00028974493034183979, 0.00022441640612669289, 0.00017785692762117833, 0.0001833433925639838, 0.00014304433716461062, 0.00012168596731498837, 0.00025398930301889777, 0.00019499532936606556, 7.447689858963713e-05, 0.0001642741117393598, 0.00011917303345398977, 0.00017803109949454665, 0.00028072201530449092, 0.00025911274133250117, 0.00013158195361029357, 0.0002928424219135195, 9.2862217570655048e-05, 0.00026504759443923831, 0.00026484599220566452, 0.00017041090177372098, 0.00030321400845423341, 0.00023282520123757422, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -5,17,127,-12,3,57,-5,-97, 
  /* [1][0][][] */ 80,-54,64,-69,-12,-71,127,18, 
  /* [2][0][][] */ 71,65,80,-69,-64,30,127,-35, 
  /* [3][0][][] */ -2,22,4,-26,18,-59,127,11, 
  /* [4][0][][] */ 127,-49,-57,-42,-92,-58,-30,73, 
  /* [5][0][][] */ 26,75,127,-4,25,-47,32,-43, 
  /* [6][0][][] */ 113,117,-16,127,-90,21,30,106, 
  /* [7][0][][] */ -26,-6,-4,42,39,-111,-127,-44, 
  /* [8][0][][] */ 111,78,-41,91,-57,24,-127,-66, 
  /* [9][0][][] */ 127,-20,-42,45,4,-45,26,-79, 
  /* [10][0][][] */ 79,28,-5,19,-24,127,39,2, 
  /* [11][0][][] */ 115,-21,-4,-127,102,-72,-52,82, 
  /* [12][0][][] */ -65,115,85,-36,14,63,-88,127, 
  /* [13][0][][] */ 127,-1,-88,21,37,-81,31,-107, 
  /* [14][0][][] */ 114,29,-3,-21,-127,34,-83,-12, 
  /* [15][0][][] */ 9,20,-88,-24,-127,-57,116,89, 
  /* [16][0][][] */ -9,-51,127,-7,125,-54,-61,-33, 
  /* [17][0][][] */ 21,-14,85,-6,127,-57,-66,-7, 
  /* [18][0][][] */ 112,-47,127,43,-33,35,-42,5, 
  /* [19][0][][] */ 69,49,62,-62,-38,-127,18,-53, 
  /* [20][0][][] */ 47,-30,51,127,17,-64,-70,68, 
  /* [21][0][][] */ 93,-17,-71,-127,52,-54,2,103, 
  /* [22][0][][] */ -44,-127,-54,-54,67,-43,127,-93, 
  /* [23][0][][] */ -10,22,27,-40,-102,-127,8,-28, 
  /* [24][0][][] */ 127,8,62,50,-16,-34,-96,82, 
  /* [25][0][][] */ 102,71,-12,-73,-27,-22,-24,127, 
  /* [26][0][][] */ -79,-31,19,-127,98,5,-45,-73, 
  /* [27][0][][] */ 106,127,-7,-51,11,56,30,5, 
  /* [28][0][][] */ 17,127,-5,9,5,-67,-2,123, 
  /* [29][0][][] */ 119,32,112,126,51,-49,-127,63, 
  /* [30][0][][] */ 127,-110,-74,109,53,12,-79,84, 
  /* [31][0][][] */ 99,-83,19,48,-82,-100,-127,60, 
  /* [32][0][][] */ -103,-69,34,-127,85,-23,-31,-88, 
  /* [33][0][][] */ 19,5,31,28,30,-82,127,39, 
  /* [34][0][][] */ -77,92,122,-81,127,-96,-70,101, 
  /* [35][0][][] */ -62,27,12,126,7,127,41,-35, 
  /* [36][0][][] */ 83,31,-29,-127,39,-12,27,48, 
  /* [37][0][][] */ 38,43,-7,0,-77,127,64,50, 
  /* [38][0][][] */ -26,-64,28,110,18,48,7,127, 
  /* [39][0][][] */ 19,-2,-127,39,-4,-33,-29,64, 
  /* [40][0][][] */ 66,19,-92,6,-49,48,-52,127, 
  /* [41][0][][] */ 29,4,20,-41,-97,-127,-9,-5, 
  /* [42][0][][] */ -81,58,-95,108,-14,98,-35,-127, 
  /* [43][0][][] */ -10,-1,-29,-127,-22,10,-15,-80, 
  /* [44][0][][] */ 73,35,27,81,31,127,-50,30, 
  /* [45][0][][] */ 4,73,-27,19,127,-30,-77,-14, 
  /* [46][0][][] */ 60,-64,8,127,76,35,-50,71, 
  /* [47][0][][] */ -11,-87,44,-18,127,18,42,25, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0029076994396746159, 0.0029786843806505203, 0.0024142854381352663, 0.0023719700984656811, 0.0017660710727795959, 0.0024439196567982435, 0.0023744530044496059, 0.0018953130347654223, 0.0018593701533973217, 0.0021553509868681431, 0.0029511949978768826, 0.0012080175802111626, 0.0020524391438812017, 0.00152793456800282, 0.0012301242677494884, 0.0021040779538452625, 0.0022223270498216152, 0.0013446637894958258, 0.0028048469685018063, 0.0019142158562317491, 0.0023894216865301132, 0.00062415626598522067, 0.0007909765699878335, 0.0035374315921217203, 0.003174633951857686, 0.0019491957500576973, 0.0035345808137208223, 0.0027376420330256224, 0.0021696658805012703, 0.0022365949116647243, 0.0017449890729039907, 0.0014844397082924843, 0.0030984000768512487, 0.0023787361569702625, 0.00090853916481137276, 0.0020039698574692011, 0.0014537845272570848, 0.0021717904601246119, 0.0034245105925947428, 0.0031609004363417625, 0.001605160185135901, 0.0035723668988794088, 0.0011328205000609159, 0.0032332995906472206, 0.0032308399677276611, 0.0020788321271538734, 0.0036988891661167145, 0.0028402204625308514, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -10410, -2929, -1436, -10867, 1007, -1963, 10964, 9377, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00013791707169730216, 0.00024655807646922767, 9.2336020315997303e-05, 0.00012778316158801317, 9.8651486041489989e-05, 0.00015906784392427653, 9.7589450888335705e-05, 0.00013982308155391365, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-26,22,-24,21,54,9,35,109,-77,55,10,-40,58,16,-46,10,-27,-25,-16,13,-53,8,-18,-54,-29,-35,-33,-32,74,-19,33,28,-36,12,-26,63,-65,-49,8,28,-21,-68,-3,58,-24,56,-32, 
  /* [1][0][][] */ 51,-3,-12,64,54,62,19,30,69,-81,0,8,41,20,-39,-16,-36,-42,-72,-5,7,-47,53,81,-4,-62,-2,44,-27,57,-51,127,-25,44,-19,-24,-60,-16,-6,-22,-47,-18,-34,42,23,-5,4,-84, 
  /* [2][0][][] */ -28,-27,-83,40,-73,-27,-5,42,-97,-75,-80,-30,-30,39,-127,-6,73,-77,27,-14,123,88,-19,9,45,97,21,-88,-56,-3,66,4,-22,45,64,-59,66,-13,88,100,-38,98,48,0,-74,71,-37,75, 
  /* [3][0][][] */ 0,-18,-6,36,-21,3,-12,48,79,94,-127,-31,21,-23,-26,75,-55,-14,-4,49,-19,1,74,20,3,15,-48,56,-34,23,-35,-28,18,28,31,14,52,-4,46,8,-54,86,70,22,30,-12,-32,-42, 
  /* [4][0][][] */ -27,-67,21,-39,7,92,-52,-72,6,-48,67,33,-53,-29,-22,29,71,10,-22,46,-67,-21,111,-12,-91,-11,-1,15,15,-27,-9,63,-45,48,-27,57,-32,32,2,25,-41,40,-29,43,127,57,-7,4, 
  /* [5][0][][] */ -64,-60,58,-127,-16,22,-38,-52,-6,70,-50,68,-83,23,47,10,70,51,69,14,26,-5,-14,-68,38,-75,3,-49,-11,-32,32,-77,-10,-46,49,-10,-16,32,33,66,94,12,17,-24,-13,-14,-27,28, 
  /* [6][0][][] */ -65,-71,34,26,-61,-63,8,-72,-107,15,-127,38,22,-46,57,18,-34,17,14,125,-23,-2,79,50,-75,-23,59,18,20,-32,-38,-68,-42,60,73,-91,-44,82,54,-35,-72,59,78,-63,-5,-44,-37,6, 
  /* [7][0][][] */ 21,-2,10,-11,7,27,-39,-45,-127,-34,94,24,9,-29,30,6,14,40,0,-20,-43,16,-17,-37,40,0,-38,16,-9,-21,-24,-48,-105,-51,-32,8,55,-29,-24,-4,52,4,48,-22,19,-39,41,20, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0058614755980670452, 0.01047871820628643, 0.003924280870705843, 0.0054307840764522552, 0.0041926880367100239, 0.006760383490473032, 0.0041475514881312847, 0.0059424811042845249, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -1278, 620, 10385, 4095, -135, -4480, -16, 11288, 7034, -2838, -3703, -6267, -2084, 13919, 10245, -480, 6203, -4593, 1917, -1137, 14141, -3207, -1580, -2337, 2153, -6542, 378, -3409, 7581, -21514, -3162, 1440, -2561, -1929, -2110, -1140, 6788, -5707, 1612, -9834, -1169, 5260, -4255, -1576, 1651, -5198, 6737, -3194, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0003384017909411341, 0.00016550780856050551, 0.00011087027087341994, 9.0321831521578133e-05, 0.00021842790010850877, 0.00013992234016768634, 0.00032203216687776148, 0.00013302384468261153, 0.0001715157413855195, 0.00047449950943700969, 0.00035213559749536216, 7.9966412158682942e-05, 0.00035228399792686105, 7.8081422543618828e-05, 0.00014192656090017408, 0.00023255686392076313, 0.00016558436618652195, 0.00017566462338436395, 0.00018317550711799413, 0.00027775956550613046, 0.00010812131222337484, 0.00019207918376196176, 0.00022256899683270603, 0.00027437604148872197, 0.00023096802760846913, 0.00018171740521211177, 0.00028088892577216029, 0.00045379027142189443, 8.3796971011906862e-05, 0.00012304270057938993, 0.00020143033179920167, 0.00025267025921493769, 7.9213808930944651e-05, 0.00046840164577588439, 0.00011293065472273156, 0.00011592923692660406, 0.0002094485389534384, 0.00012201445497339591, 7.0703390520066023e-05, 0.00010785111953737214, 0.00025556149194017053, 0.00013665294682141393, 0.00025022949557751417, 0.00024801277322694659, 0.00020210118964314461, 0.00011548220209078863, 0.00019836855062749237, 0.00017415452748537064, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 72,72,-29,66,1,-2,-61,13,34,-87,36,6,15,-98,-39,35,94,38,-64,0,91,15,-18,-10,80,42,17,-1,-75,22,-6,-57,123,14,112,25,-31,30,126,31,-74,84,-96,-46,37,-76,-38,0, 92,127,-83,107,21,61,-79,-127,49,45,127,41,-13,-12,-28,-9,-70,127,-78,23,63,127,41,-19,31,25,5,127,-127,83,-26,-127,12,-26,25,81,-71,127,127,48,-127,-72,69,-2,17,36,-127,103, 49,39,-18,41,3,-9,-43,22,26,-105,33,4,12,-79,-32,-22,84,-12,-30,-13,82,18,-22,45,57,79,14,0,-18,17,-15,-38,114,21,82,13,-15,22,95,9,-43,84,47,67,38,99,8,-17, 
  /* [0][1][][] */ -23,-52,-121,104,21,56,65,-32,38,49,-43,127,127,0,-32,-72,-39,69,75,-15,-110,24,31,-97,29,57,17,14,-11,90,22,45,70,127,45,37,-73,-1,-51,74,84,4,78,-109,15,-84,-6,127, 44,-94,-26,-127,115,16,127,-86,-127,127,5,94,-102,127,127,-17,-127,74,19,127,45,2,127,-2,-127,127,32,-75,-93,36,-127,91,127,-93,49,122,127,68,-4,127,126,-74,-27,3,123,-54,1,34, -8,-52,-127,57,-22,127,49,-21,31,31,-36,76,-12,17,-40,-17,-76,74,127,-40,-127,22,-59,127,8,23,22,36,51,84,40,30,1,-2,-29,-127,-38,-13,-11,30,48,74,-20,127,-10,127,-26,81, 
  /* [0][2][][] */ -34,-26,-11,22,-11,10,-17,0,33,-28,4,6,38,-87,-41,38,83,8,18,6,-82,29,3,4,22,-4,-8,4,1,10,38,0,25,16,127,-3,-7,63,79,37,9,87,127,-20,-51,-104,2,-22, -127,-8,-95,43,-127,-3,-67,-16,25,113,-77,64,-14,-38,-17,127,-95,43,-87,-34,-99,31,10,-21,-19,67,-127,-18,-75,127,56,15,45,-19,24,28,-18,45,-56,48,-67,-127,-113,-27,-127,70,-85,95, -26,-31,-14,14,4,-6,-13,-1,23,-54,-8,-21,0,-77,-24,8,85,-34,94,16,-91,-7,12,40,18,-20,-10,-1,16,11,37,2,37,14,68,24,0,55,96,4,13,88,-55,51,-32,100,4,-54, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.014608798548579216, 0.0071449689567089081, 0.0047862674109637737, 0.0038991917390376329, 0.0094295283779501915, 0.0060404445976018906, 0.013902123086154461, 0.0057426369749009609, 0.0074043315835297108, 0.020484134554862976, 0.015201687812805176, 0.0034521485213190317, 0.015208093449473381, 0.0033707735128700733, 0.0061269667930901051, 0.010039475746452808, 0.0071482742205262184, 0.0075834384188055992, 0.0079076830297708511, 0.011990875005722046, 0.0046675950288772583, 0.008292054757475853, 0.0096082994714379311, 0.011844808235764503, 0.0099708857014775276, 0.0078447367995977402, 0.012125969864428043, 0.019590117037296295, 0.0036175136920064688, 0.0053117512725293636, 0.0086957439780235291, 0.01090777013450861, 0.0034196586348116398, 0.020220890641212463, 0.0048752143047749996, 0.0050046630203723907, 0.0090418895706534386, 0.0052673616446554661, 0.0030522639863193035, 0.0046559306792914867, 0.011032585054636002, 0.0058993054553866386, 0.010802403092384338, 0.010706706903874874, 0.008724704384803772, 0.0049853646196424961, 0.0085635669529438019, 0.0075182477012276649, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { 20956, 4532, 1187, 1046, 3893, 1476, 5540, 4053, 2193, -5579, 9988, 1006, 6041, 1968, 4798, 1886, 4251, -523, 6736, 249, 3867, -564, 2991, 4749, 2182, -2655, 2003, 9279, 654, 5872, 1122, 9590, 481, 4238, -519, -1731, 2155, 2847, 323, 1432, 12405, -634, 9254, 2803, 920, 3477, 3955, -1198, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 5.0539605581434444e-05, 0.00017488353478256613, 0.00020494984346441925, 0.00020995452359784395, 0.00018743655527941883, 0.00029241724405437708, 0.00014597047993447632, 0.00017493066843599081, 0.00019432928820606321, 0.00013494722952600569, 9.5254727057181299e-05, 0.00022962791263125837, 0.00013172735634725541, 0.00019248200987931341, 0.00013553371536545455, 0.00019503245130181313, 0.00017915116040967405, 0.00023321424669120461, 0.00013116175250615925, 0.0002264989452669397, 0.0001768011279636994, 0.00024280036450363696, 0.00018244005332235247, 0.00014525231381412596, 0.00019159457588102669, 0.00024409769685007632, 0.00022192441974766552, 0.00010170092718908563, 0.00022567922133021057, 0.00013258757826406509, 0.0003028509090654552, 0.00010149840090889484, 0.00024566045613028109, 0.00018358330999035388, 0.00019447907106950879, 0.00022375740809366107, 0.00027366468566469848, 0.00013858654710929841, 0.00026041257660835981, 0.00020300920004956424, 7.5893563916906714e-05, 0.00024863405269570649, 9.3326394562609494e-05, 0.00015269091818481684, 0.00021854780788999051, 0.00021373289928305894, 0.0001628911413718015, 0.00026296969735994935, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,48,-14,-20,68,28,13,-46, 
  /* [1][0][][] */ -6,-57,-34,-17,-61,-127,8,20, 
  /* [2][0][][] */ -72,61,-1,-51,-46,35,-58,127, 
  /* [3][0][][] */ 62,48,49,-16,-46,-127,49,-15, 
  /* [4][0][][] */ 12,57,-127,38,-125,87,46,31, 
  /* [5][0][][] */ -28,47,29,-32,-80,-127,-57,-11, 
  /* [6][0][][] */ -56,127,105,-31,-66,-36,25,-44, 
  /* [7][0][][] */ -12,-2,43,65,-5,-127,-8,55, 
  /* [8][0][][] */ 127,21,-79,79,-86,-71,-116,-13, 
  /* [9][0][][] */ 100,-38,-66,-74,4,-21,-49,127, 
  /* [10][0][][] */ -92,4,6,127,7,69,31,-91, 
  /* [11][0][][] */ 20,16,65,-20,5,124,127,101, 
  /* [12][0][][] */ -82,-94,-41,-99,127,-29,-21,49, 
  /* [13][0][][] */ -33,-11,-15,42,22,-127,41,75, 
  /* [14][0][][] */ 86,88,113,26,79,-127,-86,-24, 
  /* [15][0][][] */ -46,77,127,60,-5,23,44,-87, 
  /* [16][0][][] */ -99,-49,46,-63,127,3,-55,-7, 
  /* [17][0][][] */ 30,-47,-39,0,-17,127,-25,38, 
  /* [18][0][][] */ -26,127,79,-53,-56,45,89,-83, 
  /* [19][0][][] */ 20,107,89,127,-32,37,37,29, 
  /* [20][0][][] */ 5,12,76,-127,-62,4,64,-24, 
  /* [21][0][][] */ -99,75,31,-124,125,68,127,3, 
  /* [22][0][][] */ 78,-33,-104,74,56,-56,-60,127, 
  /* [23][0][][] */ 33,-89,-127,-48,69,-19,-66,102, 
  /* [24][0][][] */ 38,-20,-94,14,-53,37,-127,110, 
  /* [25][0][][] */ -12,-25,50,8,127,-19,-79,-41, 
  /* [26][0][][] */ 16,108,127,-28,-40,-14,60,-71, 
  /* [27][0][][] */ -41,31,127,-95,19,29,87,-121, 
  /* [28][0][][] */ 65,-10,98,127,76,-31,39,112, 
  /* [29][0][][] */ 77,80,107,24,-67,29,-127,90, 
  /* [30][0][][] */ 36,-12,-88,57,-127,-46,-42,59, 
  /* [31][0][][] */ 19,127,109,-64,-85,49,104,-122, 
  /* [32][0][][] */ 59,-17,-7,28,97,127,26,-37, 
  /* [33][0][][] */ 19,-40,-127,7,21,-14,-41,78, 
  /* [34][0][][] */ 27,-53,21,-127,-5,70,-16,10, 
  /* [35][0][][] */ -32,15,98,-11,7,-127,-7,-21, 
  /* [36][0][][] */ -6,14,-34,-127,-16,8,10,-43, 
  /* [37][0][][] */ 64,-13,-23,-87,-83,127,-66,-82, 
  /* [38][0][][] */ 89,-60,-28,109,65,28,-33,127, 
  /* [39][0][][] */ 127,89,28,81,-9,100,-45,-9, 
  /* [40][0][][] */ 42,-127,-125,-36,10,17,-60,124, 
  /* [41][0][][] */ 1,-57,-127,-96,0,-82,-34,-19, 
  /* [42][0][][] */ 59,111,93,127,-85,-36,34,51, 
  /* [43][0][][] */ 127,-40,-112,-122,-70,-45,28,68, 
  /* [44][0][][] */ -13,84,121,-91,-91,-17,80,-127, 
  /* [45][0][][] */ 43,27,-127,64,-42,34,17,63, 
  /* [46][0][][] */ 49,-44,-73,-127,21,-38,-38,55, 
  /* [47][0][][] */ 84,-121,127,-66,82,-21,9,7, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0006728938315063715, 0.002328432397916913, 0.0027287409175187349, 0.0027953742537647486, 0.0024955656845122576, 0.0038932985626161098, 0.0019434784771874547, 0.0023290598765015602, 0.0025873368140310049, 0.001796712982468307, 0.0012682394590228796, 0.0030573094263672829, 0.0017538428073748946, 0.0025627417489886284, 0.0018045214237645268, 0.002596698934212327, 0.0023852523881942034, 0.0031050585675984621, 0.0017463123658671975, 0.0030156497377902269, 0.0023539636749774218, 0.0032326898071914911, 0.0024290413130074739, 0.0019339168211445212, 0.0025509262923151255, 0.0032499628141522408, 0.0029547435697168112, 0.0013540653744712472, 0.0030047358013689518, 0.0017652959795668721, 0.0040322141721844673, 0.0013513688463717699, 0.0032707697246223688, 0.0024442628491669893, 0.0025893310084939003, 0.0029791484121233225, 0.0036436233203858137, 0.0018451674841344357, 0.0034671821631491184, 0.0027029027696698904, 0.0010104612447321415, 0.0033103607129305601, 0.0012425652239471674, 0.0020329556427896023, 0.0029097867663949728, 0.002845680108293891, 0.0021687634289264679, 0.0035012282896786928, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { -12815, -36032, 243, 6262, -16801, 1006, -25220, -1123, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00014315464068204165, 7.3244147642981261e-05, 5.9669531765393913e-05, 6.5652391640469432e-05, 7.4795381806325167e-05, 7.874036964494735e-05, 6.1088554502930492e-05, 9.0066518168896437e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 47,52,-80,55,17,23,-88,-28,7,-21,-1,-36,-14,-5,46,8,52,-17,51,-19,17,-33,44,-1,17,-30,-17,19,-13,-2,-17,4,45,24,23,12,127,62,32,-24,6,-17,-5,-23,83,26,18,-48, 
  /* [1][0][][] */ 62,30,10,0,34,94,-13,-21,31,61,-43,-75,119,-17,18,59,29,35,27,-92,127,-28,46,55,45,34,48,24,26,-68,66,83,61,110,18,125,77,34,23,26,95,21,40,41,24,47,123,-76, 
  /* [2][0][][] */ -25,17,81,127,-43,27,1,61,33,70,16,-69,-32,104,25,47,-74,-97,79,10,-6,62,-52,-74,-31,-40,28,-5,-111,19,1,-1,-40,-25,-81,-46,16,28,-85,-15,-26,-50,-31,24,63,-78,-30,30, 
  /* [3][0][][] */ -28,51,-79,-11,23,-73,10,68,109,-82,-41,14,-4,-18,14,60,28,5,-16,-21,-7,22,-79,34,-19,-28,35,-10,67,-30,47,-52,39,-18,-27,-51,-127,-5,-80,17,-22,-54,36,-5,-52,16,-15,-36, 
  /* [4][0][][] */ 53,-17,37,-17,-56,78,29,73,-127,-54,52,52,83,-57,-67,-65,98,64,66,-25,16,-94,-23,51,-31,3,-54,-125,-59,-56,94,48,82,7,112,89,63,69,56,39,5,43,-48,-38,87,68,89,-48, 
  /* [5][0][][] */ 33,75,15,92,28,31,-53,-109,-104,26,-12,-4,22,69,40,-78,76,109,-31,28,-9,-72,-18,-77,-108,-78,-45,63,1,47,-28,36,1,-88,70,5,-37,127,-33,-123,-15,-38,-18,-49,0,-13,-43,95, 
  /* [6][0][][] */ 124,55,-4,127,-100,21,13,65,19,-96,72,87,81,-47,-32,-55,60,28,-77,21,82,-28,-31,0,4,71,-48,-46,18,-48,63,58,20,-44,-2,94,108,-88,6,12,-98,74,-112,61,60,116,108,-53, 
  /* [7][0][][] */ 19,19,127,44,-33,53,-81,14,-35,93,-11,-7,40,55,14,-1,-51,-5,-53,6,-12,37,2,-35,-6,40,50,-14,3,2,13,-11,-92,-14,61,31,88,2,31,-9,-19,-37,-29,-47,-2,-30,9,26, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0060840719379484653, 0.0031128760892897844, 0.002535955049097538, 0.0027902266010642052, 0.0031788037158548832, 0.0033464657608419657, 0.0025962635409086943, 0.0038278268184512854, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 14685, -20736, -1252, 1674, -1125, 14853, 3919, -2916, -10086, 1931, -2959, -2758, -8637, -16601, 6193, -669, -8298, 35527, -3231, -14049, 14635, -1620, -818, -341, 534, 416, -4339, 358, -1484, 409, 1547, 23925, 17475, -1204, 6573, 20795, -1500, 18933, 2736, -953, -3983, -8639, -1575, 3597, 3737, 27060, 16379, -4664, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 8.7821892520878464e-05, 6.6288412199355662e-05, 0.00077491067349910736, 0.0002631989773362875, 0.00013690075138583779, 0.00013195115025155246, 9.4384762633126229e-05, 0.00035188504261896014, 9.5456111012026668e-05, 0.00027250550920143723, 0.00016745274479035288, 9.3542337708640844e-05, 0.00011590379290282726, 8.4228311607148498e-05, 0.00015378424723166972, 8.9795459643937647e-05, 5.0123126129619777e-05, 4.98278095619753e-05, 0.0003640120557975024, 4.374901982373558e-05, 9.6240306447725743e-05, 0.00031924096401780844, 0.00021508129430003464, 0.00017308621318079531, 0.00022365243057720363, 0.00022260767582338303, 0.00018876919057220221, 0.00019577513739932328, 0.00024361595569644123, 0.00018872988584917039, 7.839170575607568e-05, 8.80825100466609e-05, 9.6917377959471196e-05, 0.00024493492674082518, 0.00011716977314790711, 0.00010200559336226434, 0.0006068333750590682, 0.00014151593495626003, 0.00011592837108764797, 0.00041973637416958809, 0.00011421950330259278, 0.00013401667820289731, 0.00018039435963146389, 0.00011200946755707264, 0.00020160163694527, 5.7831959566101432e-05, 9.4743569206912071e-05, 0.00015061639714986086, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -54,-2,30,13,127,-42,27,12,13,31,61,-23,4,11,-67,19,85,-39,-15,51,-30,14,-41,-13,-18,-1,27,-48,-26,127,18,-87,-45,96,117,-75,10,-43,-127,-28,16,-12,-16,-67,-3,-39,-126,24, -72,109,-10,37,-16,-75,116,-13,83,15,53,127,53,127,-24,40,114,-85,9,68,-32,-20,98,-110,5,47,-102,22,-26,-89,110,-127,-127,-81,10,-25,-59,-24,-112,21,-53,-20,16,-127,23,-71,24,45, -24,-14,2,2,47,-39,23,2,24,22,-4,-57,-20,5,-54,28,65,-23,-10,52,-17,3,-56,-5,23,3,24,-110,-34,48,-66,-84,3,-7,106,-51,14,-26,-93,11,20,3,0,-49,-15,-63,-127,-27, 
  /* [0][1][][] */ -127,127,-12,-69,7,-80,18,-4,32,20,78,48,73,108,-56,41,127,-127,18,83,-32,-50,-89,-41,-127,-13,-28,11,-7,1,87,-59,-61,127,-115,-76,36,-72,28,67,-92,24,-74,63,-15,-127,14,-46, 6,120,127,127,-45,104,-127,127,127,-127,-74,85,127,103,127,-95,-61,-98,127,6,-127,127,127,-1,92,102,72,127,127,-78,127,20,-68,-87,-32,-127,127,127,80,67,-45,127,-26,83,127,39,-2,-127, -68,72,-32,-51,-60,-108,18,-20,-6,6,73,40,37,100,-45,127,100,-115,-4,94,51,-76,-90,-38,23,-19,-24,16,-5,16,93,-42,-14,-27,-127,-62,22,-78,33,-127,-64,35,127,72,-32,-85,-6,100, 
  /* [0][2][][] */ -12,-16,3,-9,29,-42,29,8,31,30,127,34,16,-1,-40,95,89,-61,-41,17,-27,7,-43,37,-21,-14,-29,-26,17,68,-2,-7,-20,38,-73,17,-38,-58,41,-36,84,-12,-8,5,-26,-12,-5,-35, -55,118,9,19,-91,-127,80,-67,59,24,28,-61,-40,28,-52,117,69,-9,-5,127,-62,14,86,127,9,-127,127,7,25,-43,-49,-108,7,-43,-66,-112,-65,-75,27,39,127,50,-38,44,-29,-71,-110,-11, 42,-24,17,-3,-16,-42,23,14,27,25,56,17,42,4,-36,64,68,-52,-50,27,-23,-2,-43,39,5,-16,-24,-67,10,2,-18,-3,-9,6,-31,36,-31,-45,45,6,52,2,37,1,-27,-65,12,23, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0049366457387804985, 0.0037262053228914738, 0.04355929046869278, 0.01479494571685791, 0.0076954676769673824, 0.0074172401800751686, 0.0053055579774081707, 0.019780168309807777, 0.0053657805547118187, 0.015318084508180618, 0.0094128567725419998, 0.0052582034841179848, 0.0065151858143508434, 0.0047346432693302631, 0.008644523099064827, 0.0050475839525461197, 0.0028175220359116793, 0.0028009216766804457, 0.020461851730942726, 0.0024592205882072449, 0.0054098619148135185, 0.017945177853107452, 0.012090153060853481, 0.0097295250743627548, 0.012571954168379307, 0.012513226829469204, 0.010611097328364849, 0.011004915460944176, 0.013694143854081631, 0.010608887299895287, 0.0044065560214221478, 0.0049512954428792, 0.0054479213431477547, 0.013768285512924194, 0.0065863491035997868, 0.0057339402846992016, 0.034111328423023224, 0.0079548964276909828, 0.0065165674313902855, 0.02359422855079174, 0.0064205084927380085, 0.0075333481654524803, 0.010140330530703068, 0.0062962779775261879, 0.011332434602081776, 0.0032508510630577803, 0.0053257271647453308, 0.0084664514288306236, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 612, 5000, -3731, 3693, 2385, 3623, 2592, 9796, 6029, 4443, -1883, -142, 1053, 4145, 3210, -536, -8, 4899, 7536, 884, 2150, 7612, 2221, 5482, 12240, 7161, 1082, 6833, 1818, 4455, -2010, 8286, 1348, 7016, 5751, 4451, 57100, 9940, 4739, 12123, 1779, 831, 4693, 1112, 2587, 1708, 2051, 2955, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00033146684290841222, 0.00015213845472317189, 0.00019969840650446713, 0.0001729419018374756, 0.00019965867977589369, 0.00018112490943167359, 0.00019883208733517677, 9.0906549303326756e-05, 0.0001446270034648478, 0.00016240229888353497, 0.00018324401753488928, 0.00025069172261282802, 0.00022615560737904161, 0.00014799043128732592, 0.00017092433699872345, 0.00021864347218070179, 0.00023483159020543098, 0.00014172666124068201, 0.00012094553676433861, 0.00016861270705703646, 0.00023161579156294465, 0.00010747525811893865, 0.00024234759621322155, 0.00013292062794789672, 7.445021765306592e-05, 0.00012312174658291042, 0.00024497744743712246, 0.00013791405945084989, 0.00013575665070675313, 0.00017574116645846516, 0.00024979803129099309, 9.5298208179883659e-05, 0.00030178538872860372, 0.0001125072012655437, 0.00011915337381651625, 0.00017694731650408357, 2.7025143936043605e-05, 9.3203081632964313e-05, 0.00013393066183198243, 8.0348007031716406e-05, 0.00019691551278810948, 0.00026622030418366194, 0.00014992659271229059, 0.0002046258159680292, 0.00024718951317481697, 0.00018520223966334015, 0.00021742544777225703, 0.00013091052824165672, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -79,-127,-34,27,-32,-7,49,-50, 
  /* [1][0][][] */ -15,127,48,-88,2,-85,-73,94, 
  /* [2][0][][] */ -127,-59,39,5,65,0,32,-15, 
  /* [3][0][][] */ 3,-36,-127,-64,32,-57,-32,60, 
  /* [4][0][][] */ -67,-120,111,-25,127,-66,56,8, 
  /* [5][0][][] */ -24,72,55,-92,104,40,-59,127, 
  /* [6][0][][] */ -124,94,49,73,-47,6,37,-127, 
  /* [7][0][][] */ 41,-10,56,23,53,-127,-3,96, 
  /* [8][0][][] */ -1,68,-15,-30,25,101,127,-70, 
  /* [9][0][][] */ 75,127,16,-70,-92,-59,-60,126, 
  /* [10][0][][] */ 28,-12,32,-2,-24,38,-127,-74, 
  /* [11][0][][] */ -79,9,-110,-79,127,28,36,65, 
  /* [12][0][][] */ 86,36,-28,-7,127,93,13,6, 
  /* [13][0][][] */ -127,-112,-9,49,-98,43,65,7, 
  /* [14][0][][] */ -18,96,-83,120,-63,127,-20,41, 
  /* [15][0][][] */ -11,-83,-39,-81,127,54,-26,64, 
  /* [16][0][][] */ 62,-83,1,46,31,-10,29,-127, 
  /* [17][0][][] */ -74,-75,-127,100,14,86,77,-104, 
  /* [18][0][][] */ 79,-5,127,5,-34,-121,-88,-32, 
  /* [19][0][][] */ -29,127,35,28,94,-109,-72,-35, 
  /* [20][0][][] */ -76,-13,-127,-43,30,-4,-5,-5, 
  /* [21][0][][] */ -126,-13,49,61,-84,-124,127,-56, 
  /* [22][0][][] */ 54,-12,-127,-71,-34,-5,-7,49, 
  /* [23][0][][] */ -30,32,127,-22,-95,43,-12,-96, 
  /* [24][0][][] */ -85,107,87,119,127,92,8,-46, 
  /* [25][0][][] */ -52,-127,-71,38,-59,41,47,0, 
  /* [26][0][][] */ 109,115,-127,-59,-111,-32,-57,43, 
  /* [27][0][][] */ 63,50,-69,19,-127,20,-33,-15, 
  /* [28][0][][] */ -21,77,27,-72,83,105,-127,-126, 
  /* [29][0][][] */ 35,-3,2,-77,-127,11,11,-54, 
  /* [30][0][][] */ -86,0,39,127,47,18,-34,-18, 
  /* [31][0][][] */ 16,-115,-3,-88,-127,56,-62,-122, 
  /* [32][0][][] */ -127,-2,26,-8,9,-28,-2,20, 
  /* [33][0][][] */ 44,-81,-127,-123,-7,12,-57,22, 
  /* [34][0][][] */ 60,97,126,1,-127,-71,86,-79, 
  /* [35][0][][] */ 105,29,18,11,-104,-39,-127,-54, 
  /* [36][0][][] */ 127,16,72,-39,14,-19,65,71, 
  /* [37][0][][] */ 118,107,-4,-13,74,86,-127,43, 
  /* [38][0][][] */ -34,101,113,127,-33,60,33,-74, 
  /* [39][0][][] */ 30,55,127,-43,91,-64,-36,16, 
  /* [40][0][][] */ 74,38,31,11,-83,-127,31,-50, 
  /* [41][0][][] */ 29,-56,24,127,-25,73,10,87, 
  /* [42][0][][] */ -17,-111,78,-49,127,-33,100,29, 
  /* [43][0][][] */ -5,-25,-102,-33,125,43,-79,127, 
  /* [44][0][][] */ 102,-15,127,-6,5,28,-51,7, 
  /* [45][0][][] */ -25,22,23,-29,-93,-127,-12,98, 
  /* [46][0][][] */ -64,81,85,32,-10,-21,41,-127, 
  /* [47][0][][] */ 34,-17,22,127,-13,-124,79,73, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0054917535744607449, 0.002520635025575757, 0.003308609826490283, 0.0028653072658926249, 0.0033079516142606735, 0.0030008836183696985, 0.0032942565158009529, 0.0015061426674947143, 0.0023961849510669708, 0.0026906866114586592, 0.0030359930824488401, 0.0041534686461091042, 0.0037469535600394011, 0.0024519104044884443, 0.0028318800032138824, 0.0036224923096597195, 0.0038906976114958525, 0.0023481319658458233, 0.0020038296934217215, 0.0027935809921473265, 0.0038374180439859629, 0.0017806536052376032, 0.0040152231231331825, 0.002202233299612999, 0.0012334936764091253, 0.0020398851484060287, 0.0040587945841252804, 0.0022849647793918848, 0.0022492206189781427, 0.0029116855002939701, 0.00413866201415658, 0.0015789038734510541, 0.0049999901093542576, 0.0018640230409801006, 0.0019741370342671871, 0.0029316691216081381, 0.00044775346759706736, 0.0015441917348653078, 0.0022189677692949772, 0.0013312083901837468, 0.0032625028397887945, 0.0044107469730079174, 0.0024839888792484999, 0.0033902472350746393, 0.0040954439900815487, 0.0030684368684887886, 0.003602311946451664, 0.0021689299028366804, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 3180, -2388, 13043, -8037, -12472, -11472, -8019, -2106, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00012643203081097454, 0.00015725234698038548, 0.00011485243157949299, 0.00015499265282414854, 0.00015986502694431692, 0.00012939871521666646, 0.00018412285135127604, 0.00021490817016456276, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -17,-27,46,-48,60,87,71,94,108,-48,-19,56,-28,-20,19,-17,46,46,14,-51,-31,19,-86,-39,31,-11,18,-70,-35,25,47,25,28,49,61,18,123,-56,-78,5,-54,-64,-29,0,-67,-86,-127,54, 
  /* [1][0][][] */ -13,-1,-38,50,1,11,-39,-18,-56,28,19,89,-28,3,-28,127,41,61,9,-33,-45,-23,-69,23,15,-10,-17,-84,48,-12,-57,-68,63,-31,-31,-57,35,36,51,-44,3,67,47,-39,-2,-38,-51,-21, 
  /* [2][0][][] */ 8,-71,-28,-2,-27,19,1,11,108,19,-4,-19,-31,-75,39,10,3,-56,-21,-2,-98,47,8,27,5,42,-38,-28,-19,-36,43,-44,-95,27,-52,56,-64,56,-23,-24,127,-16,1,40,32,38,-56,-35, 
  /* [3][0][][] */ -32,-109,99,59,24,-108,-17,-11,-123,127,58,-54,57,14,-23,19,55,39,-29,45,73,82,30,-61,14,84,64,36,-27,-70,17,13,-24,9,53,8,-19,-84,-37,45,-26,-11,24,-66,-82,16,2,24, 
  /* [4][0][][] */ -9,55,-15,75,36,6,7,-4,-57,82,49,72,1,23,63,16,9,-101,-6,-12,88,-14,-95,59,70,-26,30,26,51,28,-9,-52,-50,127,1,18,62,-28,18,25,-25,45,3,-25,4,-52,-34,19, 
  /* [5][0][][] */ -28,-1,-3,-72,-127,28,111,27,11,61,-22,-30,-101,-8,54,-32,-83,36,-57,-81,-4,99,-1,31,99,24,-3,18,-23,-19,119,-51,-9,99,76,84,-22,52,81,38,-27,-40,-28,31,-66,49,26,56, 
  /* [6][0][][] */ 3,-22,-13,26,-56,-52,15,2,24,-14,42,8,-52,-26,34,56,6,-60,6,-59,71,-24,-1,-28,9,-1,11,36,39,3,9,127,43,-17,-12,21,2,-9,22,16,0,34,-28,-49,-5,-22,-21,38, 
  /* [7][0][][] */ -24,-16,-46,-3,8,-24,3,12,38,2,24,-1,-9,11,3,1,32,-7,4,-3,-58,11,10,-25,-2,-4,-54,-14,-15,-17,18,31,18,-12,27,12,-20,127,-11,-40,-38,1,-45,-34,24,65,-73,-13, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0053733610548079014, 0.0066832248121500015, 0.0048812283203005791, 0.006587187759578228, 0.0067942636087536812, 0.0054994453676044941, 0.0078252209350466728, 0.0091335969045758247, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { -65, 27409, 28908, 1901, 2064, -12515, 19846, 18323, -11447, 2706, -395, 16889, 22346, -15164, -10787, 4311, 3146, 30284, -317, 3151, 51902, 9368, -7343, -5142, 13049, 11710, -1498, -749, -2392, 287, 30163, 2476, -177, 11280, 12167, 15342, 2287, 44619, -7830, -1723, 24086, 1224, -2997, 12464, 956, -60, -8732, 13298, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00037703104317188263, 9.3100541562307626e-05, 0.00011098992399638519, 7.2861817898228765e-05, 5.3729781939182431e-05, 0.00011120732233393937, 0.00011252121475990862, 0.00010008225945057347, 0.00034521979978308082, 6.0198774008313194e-05, 9.6254174422938377e-05, 7.7616379712708294e-05, 7.7453187259379774e-05, 0.0002575865073595196, 5.2586154197342694e-05, 5.5813685321481898e-05, 5.1137547416146845e-05, 0.00014551299682352692, 0.00073045201133936644, 5.3481042414205149e-05, 4.4977645302424207e-05, 6.9921945396345109e-05, 7.557564094895497e-05, 0.00021487139747478068, 8.7204949522856623e-05, 9.2816429969388992e-05, 0.00019174547924194485, 0.00028007972287014127, 0.00014161330182105303, 0.00022773351520299911, 0.00012880880967713892, 7.3074515967164189e-05, 5.7253364502685145e-05, 0.00011767009709728882, 6.5511812863405794e-05, 0.0001259094278793782, 6.398719415301457e-05, 7.8527074947487563e-05, 0.00011656813876470551, 0.00013860918988939375, 0.0001836844312492758, 0.00020983043941669166, 8.6433945398312062e-05, 7.6371594332158566e-05, 0.00014080682012718171, 0.0002752423461060971, 0.00023988266184460372, 0.00015297194477170706, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 54,-76,-38,48,76,40,-59,-101,18,52,89,-73,-61,76,93,48,64,-79,66,77,-102,-81,40,80,-42,-18,75,76,85,90,-54,66,49,-70,-99,-89,65,-65,78,8,-79,49,34,-87,66,109,72,-61, 80,-95,-74,79,97,48,-60,-114,31,67,98,-103,-91,96,100,70,65,-97,56,100,-93,-123,65,104,-61,-57,104,101,106,127,-65,84,59,-105,-127,-91,81,-85,81,28,-104,60,38,-92,90,116,80,-78, 40,-48,-56,31,31,0,-17,-57,24,18,22,-46,-77,43,27,17,10,-26,28,21,-22,-81,30,45,-18,-11,45,35,37,48,-21,13,24,-66,-70,-51,23,-36,16,18,-25,12,11,-34,28,22,25,-49, 
  /* [0][1][][] */ 50,-91,-65,78,109,88,-121,-125,93,97,107,-86,-89,100,127,83,115,-94,54,113,-109,-117,83,106,-104,-81,107,95,102,89,-92,102,94,-118,-105,-127,93,-95,123,84,-100,103,87,-123,86,123,60,-85, 54,-127,-127,127,127,127,-127,-127,127,127,127,-127,-127,127,117,127,127,-127,59,127,-127,-127,127,127,-127,-127,127,127,127,109,-127,127,127,-127,-97,-115,127,-127,127,127,-127,127,127,-127,127,127,67,-127, -7,-67,-88,64,48,33,-65,-60,62,41,32,-67,-88,41,46,55,32,-36,26,33,-30,-81,60,70,-61,-13,30,56,56,12,-41,28,48,-119,-79,-45,43,-39,30,55,-18,50,41,-54,34,1,31,-70, 
  /* [0][2][][] */ -40,-46,-49,48,38,51,-49,-31,-80,47,29,-71,-70,33,66,53,74,-30,-80,51,-31,-52,44,47,-66,-68,61,54,28,1,-51,38,46,-70,-20,-54,36,-38,61,70,-26,67,68,-62,29,15,-101,-20, -127,-71,-89,76,48,76,-60,-9,-59,61,55,-80,-99,45,50,80,82,-40,-127,63,-50,-89,68,52,-85,-45,51,62,33,16,-73,45,65,-109,-22,-55,50,-50,55,98,-20,73,112,-80,46,-24,-127,-56, -69,-18,-65,45,19,28,4,0,-71,33,22,-36,-56,20,27,38,24,-17,-73,33,-17,-12,22,38,-41,6,21,33,4,-11,-22,13,24,-48,-6,-6,16,-9,5,39,5,29,47,-14,2,-22,-50,-25, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.016023818403482437, 0.0039567728526890278, 0.0047170715406537056, 0.0030966270714998245, 0.0022835156414657831, 0.0047263111919164658, 0.0047821514308452606, 0.0042534959502518177, 0.014671840704977512, 0.0025584478862583637, 0.0040908022783696651, 0.0032986961305141449, 0.0032917603384703398, 0.010947426781058311, 0.0022349115461111069, 0.0023720816243439913, 0.0021733457688242197, 0.0061843022704124451, 0.031044209375977516, 0.0022729441989213228, 0.0019115499453619123, 0.0029716826975345612, 0.0032119646202772856, 0.00913203414529562, 0.0037062102928757668, 0.0039446982555091381, 0.0081491824239492416, 0.011903388425707817, 0.0060185655020177364, 0.0096786739304661751, 0.0054743741638958454, 0.003105666721239686, 0.0024332678876817226, 0.0050009791739284992, 0.0027842519339174032, 0.0053511508740484715, 0.0027194556314498186, 0.0033374007325619459, 0.0049541457556188107, 0.0058908904902637005, 0.0078065879642963409, 0.0089177936315536499, 0.0036734426394104958, 0.0032457925844937563, 0.0059842895716428757, 0.01169779896736145, 0.010195013135671616, 0.0065013072453439236, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { -1804, 4593, 4252, -1012, -13, 11324, 3240, 1819, 10154, 1260, -2396, 1454, 4074, 1855, -360, 801, -1752, 9129, -3022, -1053, 882, 1208, 358, -538, 93, 2948, -1524, -1459, -699, -3069, 9696, 3327, 554, 918, 369, 1770, 1466, 8665, 1608, 512, 8334, -2088, 753, 1456, -1539, -2136, 12612, 2756, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00030325422994792461, 0.00018077519780490547, 0.00018868298502638936, 0.0002599532890599221, 0.00062065618112683296, 7.8231802035588771e-05, 0.00026668631471693516, 0.0002389030996710062, 9.8124699434265494e-05, 0.0004253713705111295, 0.00019741800497286022, 0.00034558103652670979, 0.0001695387763902545, 0.00026524704298935831, 0.00033628367236815393, 0.00020089607278350741, 0.00023269539815373719, 0.00010948385897791013, 0.00015444880409631878, 0.00028901072801090777, 0.00041427640826441348, 0.00024586875224485993, 0.00035753936390392482, 0.00022915155568625778, 0.00043477246072143316, 0.00019141519442200661, 0.00027449103072285652, 0.00022694676590617746, 0.00030373365734703839, 0.00015146748046390712, 0.00011239109880989417, 0.00021356485376600176, 0.00039275392191484571, 0.00038982561090961099, 0.00025553756859153509, 0.00021732407913077623, 0.00021019461564719677, 0.00010427416418679059, 0.00030726389377377927, 0.00026123030693270266, 0.00012157320452388376, 0.00012359795800875872, 0.00031238855444826186, 0.00028278672834858298, 0.00035597209352999926, 0.0002115848328685388, 8.5223546193446964e-05, 0.00019106699619442225, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 36,21,-52,8,-35,46,-127,32, 
  /* [1][0][][] */ 7,-63,-117,-3,-9,-18,127,-110, 
  /* [2][0][][] */ -121,-50,-76,-48,-33,55,-127,-8, 
  /* [3][0][][] */ -55,-41,20,-10,-21,-127,-112,-21, 
  /* [4][0][][] */ -45,-127,-42,14,59,25,-42,-39, 
  /* [5][0][][] */ 69,-39,92,49,-127,58,-73,-103, 
  /* [6][0][][] */ 44,-127,-69,-35,-9,70,-46,-87, 
  /* [7][0][][] */ -21,-78,-59,-55,72,-127,4,16, 
  /* [8][0][][] */ 35,69,46,67,37,-47,-2,127, 
  /* [9][0][][] */ -24,-58,-49,7,46,-15,127,-11, 
  /* [10][0][][] */ -29,16,-127,23,22,23,103,-114, 
  /* [11][0][][] */ 2,-32,-35,5,-127,21,3,51, 
  /* [12][0][][] */ 97,68,-28,42,-85,127,81,-13, 
  /* [13][0][][] */ -48,-5,20,-16,39,-127,-4,67, 
  /* [14][0][][] */ -107,-52,9,35,7,68,-127,-126, 
  /* [15][0][][] */ 63,83,52,8,-127,40,120,-60, 
  /* [16][0][][] */ 0,-59,10,69,-13,-65,3,-127, 
  /* [17][0][][] */ -80,127,30,-11,-67,-48,-88,-86, 
  /* [18][0][][] */ 91,127,-92,-111,92,105,-97,-79, 
  /* [19][0][][] */ -26,85,-15,9,-127,11,-75,-99, 
  /* [20][0][][] */ -127,-5,6,10,21,23,104,46, 
  /* [21][0][][] */ -27,1,45,21,-82,-109,-127,27, 
  /* [22][0][][] */ -6,-33,-48,-8,-127,3,6,63, 
  /* [23][0][][] */ 64,1,-17,-13,127,63,-85,81, 
  /* [24][0][][] */ 127,15,-59,26,-94,10,9,-6, 
  /* [25][0][][] */ 25,-52,51,105,-44,-127,20,101, 
  /* [26][0][][] */ 24,127,9,53,88,-23,25,-16, 
  /* [27][0][][] */ -127,111,58,-15,118,-66,1,91, 
  /* [28][0][][] */ -71,-72,-59,-31,76,-127,20,-18, 
  /* [29][0][][] */ -54,-23,44,45,127,-93,-87,70, 
  /* [30][0][][] */ 127,48,-120,-106,-75,-94,-80,-66, 
  /* [31][0][][] */ 29,5,39,67,-127,10,33,4, 
  /* [32][0][][] */ 127,19,50,43,-41,-64,90,63, 
  /* [33][0][][] */ 127,39,-52,10,-120,-66,26,50, 
  /* [34][0][][] */ 41,-12,-23,17,-44,127,18,-74, 
  /* [35][0][][] */ 123,44,-26,-35,45,-98,31,127, 
  /* [36][0][][] */ -37,-47,74,-100,-27,-18,79,-127, 
  /* [37][0][][] */ 81,-70,64,47,122,-13,44,-127, 
  /* [38][0][][] */ 67,127,7,-31,-23,19,26,80, 
  /* [39][0][][] */ 25,3,-74,70,-28,-65,-73,127, 
  /* [40][0][][] */ -18,-28,-6,-37,28,-127,21,47, 
  /* [41][0][][] */ -32,47,-127,-66,88,118,65,-111, 
  /* [42][0][][] */ 34,-49,-38,12,82,127,39,58, 
  /* [43][0][][] */ 5,48,-27,31,-127,-74,52,-59, 
  /* [44][0][][] */ -127,-53,-15,-33,50,58,-117,-75, 
  /* [45][0][][] */ -65,61,-61,20,33,-2,-68,127, 
  /* [46][0][][] */ -30,52,127,-3,-65,-56,-52,42, 
  /* [47][0][][] */ -127,-110,-45,-56,99,112,-36,88, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0030454765073955059, 0.0018154623685404658, 0.0018948775250464678, 0.0026106203440576792, 0.0062330337241292, 0.000785654759965837, 0.0026782376226037741, 0.00239922059699893, 0.00098543218336999416, 0.0042718565091490746, 0.0019826001953333616, 0.0034705500584095716, 0.001702618901617825, 0.0026637834962457418, 0.0033771796151995659, 0.0020175292156636715, 0.0023368787951767445, 0.0010995082557201385, 0.0015510754892602563, 0.0029024339746683836, 0.004160433541983366, 0.0024691740982234478, 0.003590643173083663, 0.0023012892343103886, 0.0043662684038281441, 0.0019223160343244672, 0.0027566177304834127, 0.0022791472729295492, 0.0030502912122756243, 0.0015211350983008742, 0.0011287046363577247, 0.0021447574254125357, 0.0039442908018827438, 0.0039148828946053982, 0.0025662747211754322, 0.002182509982958436, 0.0021109113004058599, 0.0010471891146153212, 0.0030857441015541553, 0.002623444888740778, 0.0012209173291921616, 0.0012412512442097068, 0.003137209452688694, 0.0028399284929037094, 0.0035749038215726614, 0.0021248727571219206, 0.00085587037028744817, 0.0019188192673027515, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 11457, 13056, 3886, 4665, 196, -13300, 6263, -6601, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00012886426702607423, 0.00011243180779274553, 0.00013900207704864442, 0.00020329072140157223, 0.00012353362399153411, 0.00012504137703217566, 7.2961098339874297e-05, 0.00012102538312319666, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 36,-47,101,67,27,-38,21,7,-6,54,-34,13,-52,-87,39,2,-111,64,-37,69,-46,69,4,-30,1,-48,65,-31,-27,27,-35,106,-62,-11,-35,-88,-67,-49,-41,-15,-13,59,-127,7,53,26,26,51, 
  /* [1][0][][] */ -56,-29,59,-3,-27,29,-34,-32,46,-11,-3,-32,-16,14,1,19,0,18,15,-13,-58,-26,-73,-25,25,-35,-30,-33,24,-70,-6,-127,-4,-57,-65,-69,-38,-82,-20,23,40,-16,78,-101,-52,-14,-23,-7, 
  /* [2][0][][] */ -57,95,-6,40,19,9,21,-33,73,-43,69,83,103,14,36,-54,95,-1,8,30,-11,20,13,127,-108,-39,10,-18,1,83,-19,-85,-16,2,8,-80,-22,12,-34,-12,88,-81,27,-2,31,-123,0,-14, 
  /* [3][0][][] */ 60,-17,-58,34,87,-81,5,-118,-34,-7,-59,-88,-19,127,-9,21,-42,-15,-68,-44,29,82,-10,-50,110,45,54,-66,34,-92,56,-61,56,65,116,-78,-44,21,-28,48,23,89,-75,28,-2,24,7,38, 
  /* [4][0][][] */ -54,29,-44,72,97,-25,29,-47,-41,-3,-66,31,-41,-19,4,-59,12,66,-32,-38,-43,37,-71,-65,17,-10,21,-37,36,-37,-30,61,-9,82,-70,-72,-59,-59,-34,1,64,-56,127,19,-2,88,-60,-52, 
  /* [5][0][][] */ 54,6,85,-11,-3,24,55,31,127,0,66,1,75,53,28,-61,-14,38,34,-44,-55,-71,16,44,17,-15,24,45,-37,-26,19,-20,-26,55,-21,62,49,1,-31,-47,-9,69,35,41,-19,-6,70,8, 
  /* [6][0][][] */ -7,-62,-19,14,33,-1,-4,16,-50,-19,106,55,93,67,-37,51,120,-127,-22,3,-12,-45,-99,34,-77,68,-33,-4,-22,-48,66,-54,94,16,-73,-26,-46,5,52,11,75,-72,0,-78,-111,48,-44,22, 
  /* [7][0][][] */ -16,-21,-60,-31,14,101,-4,-3,-10,-55,-127,-101,41,49,-60,-45,-36,22,101,25,-15,-77,60,-16,112,-28,-74,86,-44,-7,-28,-84,-47,65,51,112,86,-60,-23,-41,-24,-9,36,-19,-6,-23,5,-58, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0054767313413321972, 0.0047783516347408295, 0.0059075881727039814, 0.0086398553103208542, 0.0052501787431538105, 0.0053142583929002285, 0.0031008466612547636, 0.0051435786299407482, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -833, 1164, 1599, 259, 644, 8081, -716, -3600, -4063, -684, -6697, 158, -3615, -6274, -579, -668, -7063, 17377, -3415, 487, -302, -349, -1429, 180, 20200, -238, -190, -870, -371, -14, 357, -7945, -18, 14641, 548, 6434, 126, -2763, 224, -664, -3152, -968, 3563, 5500, 726, 7348, 1421, -1598, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00043791826465167105, 0.00013374663831200451, 0.00059594481717795134, 0.00013732691877521574, 0.00013200294051785022, 0.00028708920581266284, 0.0003266264102421701, 0.00017988642503041774, 0.00045690481783822179, 0.00013455856242217124, 0.00048736348981037736, 0.00023405387764796615, 0.00013057407340966165, 0.00013372751709539443, 0.00019739913113880903, 0.00061083171749487519, 0.00039417739026248455, 7.2825117968022823e-05, 0.00011884616105817258, 0.00042405803105793893, 0.00029085547430440784, 0.00032953292247839272, 0.00020260647579561919, 0.00088857772061601281, 0.00025360527797602117, 0.00038086215499788523, 0.00021107810607645661, 0.00012886247714050114, 0.00028054261929355562, 0.00017187788034789264, 0.00054424942936748266, 0.00046885394840501249, 0.0005425713025033474, 0.00012593022256623954, 0.00055472087115049362, 0.00021061373990960419, 0.00017052686598617584, 8.1524325651116669e-05, 0.00047612198977731168, 0.00075293896952643991, 0.00027492031222209334, 0.00092345179291442037, 0.00065207888837903738, 0.00018547470972407609, 0.00022721527784597129, 0.00013032210699748248, 0.00027059743297286332, 0.00036405297578312457, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -6,-40,38,-30,127,-4,-3,-11,-36,41,-10,9,65,21,127,-36,13,-25,-34,-19,-34,-17,-60,26,-122,45,28,-48,-7,15,-19,-1,-35,17,14,-3,84,49,28,-4,62,18,-14,-4,-97,-5,-45,-39, 2,-99,-74,-31,-57,-3,40,25,13,-4,58,127,-11,50,-67,127,-4,-80,36,-53,-81,-127,-77,77,-127,-83,23,112,18,30,127,9,-127,-117,-52,34,127,-95,115,14,56,-8,-24,-16,-55,-11,68,-1, 11,-14,-14,127,47,11,-68,-3,-30,-43,-21,-20,51,1,-62,-43,15,14,-6,-12,-5,2,-27,14,-53,-62,-25,30,3,25,-89,-7,12,62,15,16,-1,81,-127,3,24,-2,-9,26,-127,3,-63,43, 
  /* [0][1][][] */ -109,-62,127,-6,-49,-35,81,18,19,94,11,16,47,34,106,32,34,-127,91,38,84,-5,55,-39,-9,-19,36,-54,26,54,34,57,33,-109,1,127,6,38,-44,-114,21,95,-20,-80,32,-82,-67,20, 127,-66,-76,-73,-4,-127,127,127,127,14,127,-43,-127,19,-36,-40,127,-115,127,127,127,86,127,-127,3,-24,106,-17,127,127,-127,127,29,-127,127,-110,-73,127,-100,127,-127,-127,127,-127,98,-127,127,-123, -10,-107,12,77,-32,-5,-38,6,-16,-127,-29,51,76,14,-56,46,18,-7,-2,14,-6,-20,43,-23,-2,8,-127,75,-62,12,85,20,-13,-111,-20,-48,61,20,118,13,22,57,-44,5,53,-24,-63,127, 
  /* [0][2][][] */ -7,125,25,-32,74,16,-32,-17,-29,16,-6,-3,56,26,93,9,-12,2,-10,-48,-17,13,-1,12,-24,-14,27,2,-47,-104,-16,-6,-7,42,-21,30,-62,50,11,108,8,18,-2,9,22,0,-24,-39, 1,96,-51,17,23,-30,6,31,30,11,23,-39,39,127,-70,-74,2,-36,105,-79,-52,80,-2,51,70,127,1,127,-62,-103,-22,-5,93,-121,-87,-5,-74,-39,-31,-126,44,-23,-55,71,47,19,12,8, 15,127,-18,36,24,14,-50,-6,-23,-20,-3,-9,51,0,-62,-1,-9,3,-32,-28,-13,8,-5,1,-52,30,-44,13,40,-74,16,0,7,48,-1,-24,-49,67,8,3,-30,-6,3,-17,10,6,-10,32, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.018611526116728783, 0.005684231873601675, 0.025327654555439949, 0.0058363941498100758, 0.0056101251393556595, 0.01220129057765007, 0.01388162188231945, 0.0076451729983091354, 0.019418453797698021, 0.0057187387719750404, 0.020712947472929955, 0.0099472897127270699, 0.0055493982508778572, 0.005683419294655323, 0.0083894627168774605, 0.025960346683859825, 0.016752539202570915, 0.0030950675718486309, 0.00505096185952425, 0.018022466450929642, 0.012361356988549232, 0.014005148783326149, 0.0086107747629284859, 0.037764552980661392, 0.010778224095702171, 0.016186641529202461, 0.0089708194136619568, 0.0054766549728810787, 0.011923061683773994, 0.0073048099875450134, 0.023130599409341812, 0.019926292821764946, 0.023059278726577759, 0.0053520342335104942, 0.023575635626912117, 0.0089510837569832802, 0.0072473916225135326, 0.0034647837746888399, 0.020235184580087662, 0.031999904662370682, 0.011684113182127476, 0.039246700704097748, 0.02771335281431675, 0.0078826751559972763, 0.0096566490828990936, 0.0055386894382536411, 0.011500390246510506, 0.015472250990569592, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 4850, 1945, 32167, -1892, -915, 6062, -810, 835, 2405, 40, 5953, 358, 2272, 3408, 2482, 2733, 2530, 2236, -674, 4172, 1368, 226, 1014, 10850, 27674, 4365, 3493, -1160, -150, 6096, 6281, 9621, 9912, 4237, 6591, -1074, 530, 1908, 6379, 3880, 687, 12203, 9391, 3097, 6543, 2079, 3415, 547, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00017319629841949791, 0.00029029540019109845, 4.0695027564652264e-05, 0.00025574350729584694, 0.00040340304258279502, 0.0001760012237355113, 0.0002553379163146019, 0.00065467739477753639, 0.00026335290749557316, 0.0003577918978407979, 0.00013973833119962364, 0.00039227181696332991, 0.0002240309986518696, 0.0002227124641649425, 0.00022034067660570145, 0.00027765359845943749, 0.00018083144095726311, 0.0002289136900799349, 0.00040695149800740182, 0.0002136009861715138, 0.00027622489142231643, 0.00036191905383020639, 0.00027267451514489949, 9.0872337750624865e-05, 5.6897806643974036e-05, 0.00019768472702708095, 0.00022698362590745091, 0.00029600338893942535, 0.0006309187738224864, 0.00014162388106342405, 0.00014266738435253501, 0.00010293928062310442, 9.6760617452673614e-05, 0.00020884987316094339, 0.00013764758477918804, 0.0002197261928813532, 0.0003177835897076875, 0.00021000702690798789, 0.00014111293421592563, 0.00022150896256789565, 0.00022824005282018334, 8.4987987065687776e-05, 0.000119403688586317, 0.00026538912788964808, 0.00014536055095959455, 0.00031847498030401766, 0.00022414462000597268, 0.00034887329093180597, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -11,30,14,-127,-92,11,25,118, 
  /* [1][0][][] */ 98,8,-14,-4,-82,48,127,21, 
  /* [2][0][][] */ -5,113,-45,-31,-30,83,-48,-127, 
  /* [3][0][][] */ 72,-82,-90,122,-127,-43,-4,-30, 
  /* [4][0][][] */ 42,-68,51,-18,-127,-5,54,28, 
  /* [5][0][][] */ -14,49,-7,-93,-127,-7,-31,10, 
  /* [6][0][][] */ 45,-16,31,24,127,-28,-6,-114, 
  /* [7][0][][] */ 13,30,18,127,22,-4,-3,23, 
  /* [8][0][][] */ 24,24,12,-49,32,127,10,-32, 
  /* [9][0][][] */ 125,25,-16,18,-62,-53,127,78, 
  /* [10][0][][] */ 3,66,-70,-33,0,127,84,-61, 
  /* [11][0][][] */ -15,-38,-127,95,-60,30,-14,75, 
  /* [12][0][][] */ -100,-84,53,52,27,-127,-41,10, 
  /* [13][0][][] */ 40,31,34,53,-59,127,13,-39, 
  /* [14][0][][] */ 6,-91,0,-4,-63,-74,-127,104, 
  /* [15][0][][] */ -93,45,-11,5,99,0,-127,-47, 
  /* [16][0][][] */ 95,80,-95,-127,51,123,111,32, 
  /* [17][0][][] */ -104,122,-127,46,-14,-17,15,-106, 
  /* [18][0][][] */ 31,-2,-92,127,-11,-35,-37,-57, 
  /* [19][0][][] */ 119,16,15,31,-47,2,127,51, 
  /* [20][0][][] */ 42,-77,-88,127,47,-28,-29,-62, 
  /* [21][0][][] */ 23,48,127,-106,44,-29,23,-97, 
  /* [22][0][][] */ -75,-39,-127,62,-23,32,7,121, 
  /* [23][0][][] */ 73,31,29,38,-127,115,66,-42, 
  /* [24][0][][] */ -11,-2,-127,81,-43,27,43,69, 
  /* [25][0][][] */ 50,-38,-70,127,48,-4,-42,-9, 
  /* [26][0][][] */ -77,27,127,-104,-18,34,61,-9, 
  /* [27][0][][] */ -72,86,127,5,19,-7,75,21, 
  /* [28][0][][] */ -51,-95,41,-127,-22,10,-6,-28, 
  /* [29][0][][] */ -86,-80,-26,89,-4,-127,-17,66, 
  /* [30][0][][] */ -127,50,109,-32,40,40,63,21, 
  /* [31][0][][] */ -57,48,81,-127,-42,17,33,62, 
  /* [32][0][][] */ -76,88,99,-110,8,2,5,127, 
  /* [33][0][][] */ 2,105,-46,47,21,17,-127,-23, 
  /* [34][0][][] */ 93,17,127,-116,-84,-105,44,-52, 
  /* [35][0][][] */ 87,-6,27,106,71,-62,23,-127, 
  /* [36][0][][] */ 26,63,127,-99,24,-28,42,-110, 
  /* [37][0][][] */ -56,-48,101,62,-3,-127,89,-8, 
  /* [38][0][][] */ 73,0,74,35,-28,-49,127,16, 
  /* [39][0][][] */ 52,-78,-24,9,-127,7,79,60, 
  /* [40][0][][] */ -43,37,-127,110,-53,47,-84,120, 
  /* [41][0][][] */ -111,-16,-56,1,127,20,-91,17, 
  /* [42][0][][] */ -88,67,-29,-32,127,40,-110,-50, 
  /* [43][0][][] */ 127,118,-38,127,0,-99,54,75, 
  /* [44][0][][] */ -3,19,85,1,43,-127,20,-30, 
  /* [45][0][][] */ -9,-76,127,77,-31,-16,-122,18, 
  /* [46][0][][] */ 53,-127,-126,57,-83,29,-5,-22, 
  /* [47][0][][] */ -102,-27,40,-4,74,39,-127,-36, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0027747494168579578, 0.0046507748775184155, 0.00065196835203096271, 0.0040972246788442135, 0.0064628538675606251, 0.0028196866624057293, 0.0040907268412411213, 0.010488478466868401, 0.0042191334068775177, 0.005732125137001276, 0.0022387248463928699, 0.006284522358328104, 0.0035891637671738863, 0.0035680397413671017, 0.0035300417803227901, 0.0044482424855232239, 0.0028970707207918167, 0.0036673885770142078, 0.0065197027288377285, 0.0034220663364976645, 0.0044253533706068993, 0.0057982457801699638, 0.0043684733100235462, 0.0014558507828041911, 0.00091155036352574825, 0.0031670744065195322, 0.003636467270553112, 0.0047422214411199093, 0.01010784599930048, 0.0022689327597618103, 0.0022856506984680891, 0.0016491732094436884, 0.0015501859597861767, 0.0033459493424743414, 0.002205229364335537, 0.0035201972350478172, 0.0050911586731672287, 0.0033644880168139935, 0.0022607471328228712, 0.0035487585701048374, 0.0036565964110195637, 0.0013615785865113139, 0.0019129468128085136, 0.0042517553083598614, 0.0023287974763661623, 0.0051022353582084179, 0.0035909840371459723, 0.0055892416276037693, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -11456, 1261, -15727, 2376, 3240, -3103, 9806, 1776, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00017503161507192999, 0.00011836807971121743, 0.00011193665704922751, 7.6043048466090113e-05, 0.0001773414114722982, 0.00013610940368380398, 0.00016743119340389967, 0.00013225268048699945, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 46,102,-40,67,-3,-5,-23,9,61,-63,4,-28,9,9,-32,-52,-1,-19,30,16,-54,-31,-35,8,15,13,24,-4,14,9,-22,27,-63,12,113,-127,-22,22,-14,113,-31,13,10,-1,-13,35,27,-44, 
  /* [1][0][][] */ 2,-48,33,55,-11,-12,-21,-21,48,-44,93,48,18,10,-49,-86,127,45,19,8,-74,35,40,-12,-50,-95,-31,-50,-13,-64,48,-42,-8,-21,-30,13,7,-16,86,-52,-13,32,-60,41,78,64,18,51, 
  /* [2][0][][] */ 77,-28,-12,-17,111,113,61,76,-28,-6,1,-32,-5,48,62,31,-26,-34,59,-70,-39,-50,-46,58,-94,-97,123,17,58,-67,-61,19,-127,85,107,16,-10,-2,-8,16,29,70,13,-63,-21,19,56,-43, 
  /* [3][0][][] */ 81,-35,15,-9,120,126,29,48,-39,-30,24,53,-127,42,67,21,3,11,71,-109,-96,15,37,94,9,-35,53,30,51,-55,1,-17,-122,66,-70,-120,26,-37,69,-51,57,-94,-114,-30,-64,41,-18,59, 
  /* [4][0][][] */ 35,41,-30,-38,-14,-10,-19,-19,2,-5,-7,-13,-35,-21,61,52,-38,-16,-33,41,27,-12,-13,3,-49,-38,-6,51,-13,10,-21,27,-32,-16,25,-127,-11,25,9,54,7,-13,-10,-23,42,1,86,-21, 
  /* [5][0][][] */ 69,60,-94,48,8,4,-9,31,-81,-59,-56,-20,32,22,44,23,36,-62,46,127,-69,-46,-55,51,30,-20,-35,69,32,29,-55,6,0,4,-55,2,-7,18,-24,70,14,75,-3,-39,121,27,17,-59, 
  /* [6][0][][] */ -33,-74,18,-48,-42,-40,-83,-75,-32,-61,-114,41,-56,-51,100,92,-127,9,24,-16,21,56,68,13,-10,-9,-73,86,-80,-38,45,79,14,-55,89,37,28,47,-10,-85,-16,-61,-31,18,-42,-21,-11,64, 
  /* [7][0][][] */ 72,16,-15,40,13,13,10,3,79,-10,-15,-20,57,4,-12,-20,-51,-8,-31,0,1,-21,-22,-24,70,-127,14,-2,1,94,-18,16,-77,20,-60,-47,-13,25,27,22,23,69,-37,-17,-43,31,42,-27, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0074388436041772366, 0.0050306431949138641, 0.0047573079355061054, 0.0032318294979631901, 0.0075370096601545811, 0.0057846494019031525, 0.0071158255450427532, 0.0056207389570772648, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 2456, 6934, 1832, -592, -185, -92, 5878, 7610, 3068, -4100, 825, 52, 5364, 3606, 22201, 15109, -2503, -1659, 6437, 2789, 15685, -352, 438, -146, 6461, 1281, 6710, 17532, 6429, 10334, -77, 2277, 1191, -3431, -521, 2822, -764, 840, 983, 2979, 4072, 3235, -4832, 875, -1037, 317, 8516, -210, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.1311754658818245e-05, 0.00014116654347162694, 0.00068126787664368749, 7.9204226494766772e-05, 0.00058886100305244327, 0.0008423345279879868, 0.00014779285993427038, 0.0001899256749311462, 5.7957586250267923e-05, 0.00030624744249507785, 0.0005031437030993402, 0.0003596545138861984, 0.00021875376114621758, 0.00016242272977251559, 6.0341630160110071e-05, 5.8462494052946568e-05, 0.00017477312940172851, 0.00070809578755870461, 5.6268057960551232e-05, 0.00010231843043584377, 6.8924156948924065e-05, 0.00094654894201084971, 0.0016600472154095769, 0.00033612415427342057, 4.9835467507364228e-05, 0.00018888081831391901, 8.6679850937798619e-05, 0.00017568960902281106, 0.00017068949819076806, 0.00012358360982034355, 0.00063030241290107369, 0.00027882758877240121, 9.9325850897002965e-05, 0.00028855042182840407, 7.2334922151640058e-05, 7.1398506406694651e-05, 0.00045401148963719606, 0.0003090190002694726, 0.00010216318332822993, 0.00018437099060975015, 9.0696426923386753e-05, 0.00021571513207163662, 0.00010360011947341263, 0.00047107151476666331, 8.9949549874290824e-05, 0.00023076341312844306, 8.2185055362060666e-05, 0.00086589914280921221, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -16,-83,-98,65,-85,5,-95,-78,59,76,114,-38,4,11,-87,-70,98,-81,31,-41,-14,-103,-37,-75,81,99,1,-116,2,-41,57,85,45,67,66,17,93,79,38,12,-127,-14,26,40,-41,79,-37,-97, 93,-8,35,74,-127,44,-66,9,99,117,116,70,-9,-72,-127,-109,117,-37,102,-80,-108,127,127,29,127,96,47,-104,-82,-55,-100,116,96,127,99,105,-14,82,61,-70,-90,-86,21,-53,-57,98,-51,105, 113,-1,52,56,-79,13,-38,-7,26,79,-19,-27,-77,2,-47,-51,36,84,61,-11,-56,-25,-83,69,40,23,23,-34,-1,-39,25,42,45,93,8,67,-2,21,47,-6,-57,-5,1,11,-20,84,-15,-2, 
  /* [0][1][][] */ 43,-127,109,91,93,-71,-127,-127,114,79,111,-46,8,-1,-115,-87,99,127,43,-102,-34,113,28,-127,98,122,112,-127,-4,-112,-70,101,106,-2,102,50,36,112,61,1,-12,-26,92,93,-110,127,-110,112, 127,-9,3,127,125,-127,-101,6,127,127,127,63,-28,-127,-120,-127,127,61,127,-127,-127,-119,-109,43,112,127,127,-117,-127,-127,127,127,127,3,127,127,0,127,127,-127,9,-127,126,-79,-127,124,-121,-127, 99,-5,-127,67,89,-60,-43,-4,23,81,-14,-17,-127,1,-38,-30,43,-97,77,-38,-65,9,70,69,57,42,-1,-52,-10,-88,-33,33,44,-4,26,76,3,20,70,-1,-23,-6,42,-9,-71,73,-48,15, 
  /* [0][2][][] */ 57,-73,3,25,0,66,-83,-80,32,20,10,58,12,9,-55,-34,21,-36,15,-58,-16,2,9,-80,20,44,77,-24,8,-104,10,19,70,-84,66,15,-127,20,12,0,26,-8,90,-127,-72,69,-83,-12, 45,7,3,58,10,93,-36,0,23,59,4,-127,-12,-87,-42,-44,36,-10,43,-88,-41,-10,-29,27,30,58,78,-46,-82,-112,-27,20,69,-91,64,30,21,31,60,-48,127,-64,127,99,-106,45,-127,17, -35,-5,-10,39,-19,39,-25,0,6,32,-77,44,-67,1,-19,-3,3,28,35,-7,-37,22,9,34,24,34,23,-2,-1,-57,12,-13,7,-47,12,23,9,-24,39,13,62,3,26,-13,-26,53,-24,-4, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038807494565844536, 0.0059995781630277634, 0.028953883796930313, 0.0033661795314401388, 0.025026591494679451, 0.035799216479063034, 0.0062811966054141521, 0.0080718407407402992, 0.002463197335600853, 0.013015516102313995, 0.021383605897426605, 0.015285315923392773, 0.0092970347031950951, 0.0069029661826789379, 0.002564519178122282, 0.0024846559390425682, 0.0074278577230870724, 0.030094070360064507, 0.0023913923650979996, 0.0043485332280397415, 0.0029292765539139509, 0.040228329598903656, 0.070552006363868713, 0.014285275712609291, 0.0021180072799324989, 0.0080274343490600586, 0.003683893708512187, 0.0074668084271252155, 0.0072543034330010414, 0.0052523030899465084, 0.026787852868437767, 0.011850171722471714, 0.0042213485576212406, 0.01226339302957058, 0.0030742341186851263, 0.0030344363767653704, 0.019295487552881241, 0.013133306987583637, 0.0043419352732598782, 0.0078357672318816185, 0.0038545979186892509, 0.0091678928583860397, 0.0044030048884451389, 0.020020538941025734, 0.0038228558842092752, 0.0098074451088905334, 0.0034928647801280022, 0.03680071234703064, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 9474, 3935, 12143, 2152, 3471, 3868, -3404, 3541, 2222, -2380, -2929, 4339, -2903, -3916, 7272, 1481, -1640, 1840, -1490, 2645, 495, 3546, 639, -2216, -241, -4166, 2162, -3344, 3140, 6529, 770, 206, 6467, 8913, 7029, 3907, 4574, -3784, 859, 3866, -781, -3851, 3539, 2072, 213, -5250, -10079, 1805, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00052442733431234956, 0.00072790775448083878, 9.7888718300964683e-05, 0.00088799628429114819, 0.00055462424643337727, 0.00046134577132761478, 0.0032692714594304562, 0.0016842603217810392, 0.0012290230952203274, 0.00060640642186626792, 0.00014610671496484429, 0.00060521316481754184, 0.00059735629474744201, 0.001662402180954814, 0.00059480976779013872, 0.0019595932681113482, 0.0012176731834188104, 0.0003600028867367655, 0.0013403333723545074, 0.0021257682237774134, 0.00085659726755693555, 0.0005493470816873014, 0.00015673896996304393, 0.00057773070875555277, 0.0014888424193486571, 0.0010504811070859432, 0.0011238101869821548, 0.00049312831833958626, 0.0015753835905343294, 0.00092249299632385373, 0.00033068997436203063, 0.00066422345116734505, 0.0010114052565768361, 0.0003619534254539758, 0.00055060186423361301, 0.00045049400068819523, 0.00062706228345632553, 0.0021802294068038464, 0.00060044549172744155, 0.00078508409205824137, 0.00156454520765692, 0.00079014763468876481, 0.00094867858570069075, 0.00025096980971284211, 0.001646650955080986, 0.00097880663815885782, 0.00095125922234728932, 0.00055385066661983728, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -102,-107,21,-127,-61,-2,-6,2, 
  /* [1][0][][] */ -127,-12,101,4,-52,21,1,15, 
  /* [2][0][][] */ 23,-10,24,127,25,-26,-19,-3, 
  /* [3][0][][] */ -107,-74,-29,-18,40,127,-47,-34, 
  /* [4][0][][] */ -5,-31,-10,-2,-8,9,-127,-72, 
  /* [5][0][][] */ -2,-33,-16,-4,-9,10,-127,-72, 
  /* [6][0][][] */ 127,5,14,-12,-65,17,4,-3, 
  /* [7][0][][] */ -127,-29,-13,6,67,11,0,11, 
  /* [8][0][][] */ 23,42,-12,-11,-28,-127,39,19, 
  /* [9][0][][] */ 74,23,-14,-7,-25,-2,-7,127, 
  /* [10][0][][] */ 112,-11,-122,7,-91,-8,37,127, 
  /* [11][0][][] */ -127,101,9,-39,92,-68,10,24, 
  /* [12][0][][] */ 127,-33,-104,14,53,-5,-11,-22, 
  /* [13][0][][] */ 127,9,13,-11,-28,24,10,-10, 
  /* [14][0][][] */ -127,-88,95,-30,71,-14,-46,-126, 
  /* [15][0][][] */ 33,72,1,-7,-9,-127,-19,8, 
  /* [16][0][][] */ -11,-66,11,3,12,127,12,5, 
  /* [17][0][][] */ 32,-121,-73,-6,-35,127,-60,-16, 
  /* [18][0][][] */ 40,-18,-16,-19,-19,25,127,-13, 
  /* [19][0][][] */ -4,21,-2,-127,-10,35,-4,-10, 
  /* [20][0][][] */ -75,-32,73,6,56,96,-5,-127, 
  /* [21][0][][] */ -22,-7,37,-23,-17,9,-127,-80, 
  /* [22][0][][] */ 72,-9,6,127,-18,-13,56,41, 
  /* [23][0][][] */ 127,-15,-116,-11,30,-28,10,5, 
  /* [24][0][][] */ -31,20,29,35,11,0,-127,-83, 
  /* [25][0][][] */ 127,12,-87,8,14,-6,7,26, 
  /* [26][0][][] */ 1,56,-34,-127,-27,25,1,-1, 
  /* [27][0][][] */ 127,19,-109,-6,-108,50,21,81, 
  /* [28][0][][] */ -127,-23,-19,18,55,9,0,32, 
  /* [29][0][][] */ -7,-127,-16,-124,-9,27,-16,-21, 
  /* [30][0][][] */ -2,87,127,34,35,-108,112,34, 
  /* [31][0][][] */ -72,-9,-127,48,5,-25,100,107, 
  /* [32][0][][] */ -4,-124,3,-127,-12,12,-9,-19, 
  /* [33][0][][] */ 11,-124,-1,-127,7,11,2,-26, 
  /* [34][0][][] */ -27,-51,30,-100,37,-59,127,85, 
  /* [35][0][][] */ -127,11,53,4,-112,-24,32,97, 
  /* [36][0][][] */ -127,17,123,0,-46,16,-32,36, 
  /* [37][0][][] */ 127,11,-5,-6,-73,19,0,17, 
  /* [38][0][][] */ -79,6,86,37,60,-54,43,127, 
  /* [39][0][][] */ -127,-2,78,1,-71,11,-10,4, 
  /* [40][0][][] */ -1,28,40,-15,27,-5,127,52, 
  /* [41][0][][] */ 127,-12,-74,3,54,14,5,-8, 
  /* [42][0][][] */ -14,-127,32,-9,17,6,-3,-20, 
  /* [43][0][][] */ 3,123,127,-12,50,-101,71,13, 
  /* [44][0][][] */ 6,-13,-3,117,0,-127,-2,3, 
  /* [45][0][][] */ 127,-31,35,-9,-60,102,9,2, 
  /* [46][0][][] */ 13,127,-15,108,0,125,25,37, 
  /* [47][0][][] */ -17,36,15,-26,28,-36,127,73, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0056622819975018501, 0.0078592756763100624, 0.0010569120058789849, 0.0095877638086676598, 0.0059883208014070988, 0.0049811857752501965, 0.035298574715852737, 0.018185088410973549, 0.013269856572151184, 0.0065474170260131359, 0.0015775253996253014, 0.0065345331095159054, 0.0064497017301619053, 0.01794908381998539, 0.0064222067594528198, 0.021157879382371902, 0.01314731128513813, 0.0038869788404554129, 0.014471681788563728, 0.022952081635594368, 0.0092487465590238571, 0.0059313424862921238, 0.0016923226648941636, 0.0062378025613725185, 0.016075145453214645, 0.01134212501347065, 0.012133864685893059, 0.0053243441507220268, 0.017009537667036057, 0.0099602276459336281, 0.0035704851616173983, 0.0071716718375682831, 0.010920220054686069, 0.0039080390706658363, 0.0059448909014463425, 0.0048640184104442596, 0.0067704399116337299, 0.023540103808045387, 0.006483056116849184, 0.0084766130894422531, 0.016892515122890472, 0.0085312845185399055, 0.010242955759167671, 0.0027097403071820736, 0.017779016867280006, 0.010568249970674515, 0.010270819067955017, 0.0059799682348966599, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 3609, -3883, 20, 2609, 2242, 153, -1907, 1702, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 7.3186827648896724e-05, 0.0001437096216250211, 0.00010239945549983531, 6.1518403526861221e-05, 0.00013963012315798551, 0.00018400307453703135, 0.00010820876923389733, 0.00020716642029583454, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -25,-4,-45,-33,-21,37,-127,-10, 
  /* [1][0][][] */ 17,88,-2,127,6,-6,-10,-38, 
  /* [2][0][][] */ 127,-4,-32,-57,-66,50,97,-52, 
  /* [3][0][][] */ 14,-127,43,-86,20,-85,29,60, 
  /* [4][0][][] */ 127,-2,-61,-8,32,-6,-124,-48, 
  /* [5][0][][] */ 4,-32,4,36,4,-127,0,11, 
  /* [6][0][][] */ 127,-27,111,-1,107,-29,-6,7, 
  /* [7][0][][] */ -127,-3,-97,-3,-100,6,35,6, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.003110439982265234, 0.006107658613473177, 0.0043519767932593822, 0.0026145321317017078, 0.0059342803433537483, 0.0078201303258538246, 0.0045988727360963821, 0.0088045727461576462, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { -11058, 9926, 421, -13006, -638, -13201, 286, 164, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00041583110578358173, 0.00046468383516184986, 0.00022956937027629465, 0.00042422566912136972, 0.00048565899487584829, 0.00035994916106574237, 0.0013612383045256138, 0.0020645023323595524, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 0,3,15,16,10,-1,8,31, 7,3,-36,127,-22,-1,-5,29, -3,2,-12,18,0,0,-6,21, 
  /* [0][1][][] */ -4,1,127,-23,127,-1,-113,41, 127,-127,-99,7,-90,127,-15,-127, -26,5,13,-20,2,0,127,39, 
  /* [0][2][][] */ 1,3,13,3,8,-1,15,32, 4,6,-40,-2,-16,4,-10,-104, -4,2,-11,1,2,-1,-6,37, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.017672821879386902, 0.01974906213581562, 0.0097566982731223106, 0.01802959106862545, 0.020640507340431213, 0.015297839418053627, 0.057852625846862793, 0.087741345167160034, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 8808, 6806, -98, 25347, 1920, 6443, 79724, 6187, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00029689408256672323, 0.00029749664827249944, 0.0001782209292287007, 0.00010216337977908552, 0.00026918260846287012, 0.00034339021658524871, 1.7584479792276397e-05, 5.7323544751852751e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 121, 0, 
  /* [0][2][][] */ -43, 46, -1, 
  /* [1][0][][] */ 58, 127, 35, 
  /* [1][1][][] */ -67, -78, -43, 
  /* [1][2][][] */ 8, -41, 6, 
  /* [2][0][][] */ 31, 28, -46, 
  /* [2][1][][] */ 52, 69, -127, 
  /* [2][2][][] */ 21, 32, -58, 
  /* [3][0][][] */ 43, 53, 20, 
  /* [3][1][][] */ 53, 75, 26, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 4, -53, 48, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 5, -36, 33, 
  /* [5][0][][] */ 2, -56, 1, 
  /* [5][1][][] */ 0, 127, 2, 
  /* [5][2][][] */ 2, -74, 0, 
  /* [6][0][][] */ -13, -82, 2, 
  /* [6][1][][] */ -24, -127, -4, 
  /* [6][2][][] */ -14, -55, 4, 
  /* [7][0][][] */ 43, -127, 30, 
  /* [7][1][][] */ -19, -3, -10, 
  /* [7][2][][] */ -25, 74, -11, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.081919759511947632, 0.082086019217967987, 0.049175165593624115, 0.028189176693558693, 0.074273541569709778, 0.094749093055725098, 0.0048519535921514034, 0.015816856175661087, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.083280541002750397, } };
const TfArray<1, int> quant46_zero = { 1, { 32 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.092617660760879517, } };
const TfArray<1, int> quant47_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.062418717890977859, } };
const TfArray<1, int> quant51_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.077807135879993439, } };
const TfArray<1, int> quant54_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.09957529604434967, } };
const TfArray<1, int> quant55_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.060357194393873215, } };
const TfArray<1, int> quant59_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.017789790406823158, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.035522878170013428, } };
const TfArray<1, int> quant62_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.075107842683792114, } };
const TfArray<1, int> quant63_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023164244368672371, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.051826804876327515, } };
const TfArray<1, int> quant66_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.081974342465400696, } };
const TfArray<1, int> quant67_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.028768720105290413, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.042126812040805817, } };
const TfArray<1, int> quant70_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
